{
    "This function retrieves all edges between two specified vertices in a graph data structure.": "Graph.java Set<E> getAllEdges(V sourceVertex, V targetVertex)",
    "This function retrieves an edge between two vertices in a graph data structure.": "Graph.java E getEdge(V sourceVertex, V targetVertex)",
    "Provides a supplier for creating new vertices in a graph data structure.": "Graph.java Supplier<V> getVertexSupplier()",
    "Returns a supplier for creating edges in a graph data structure, essential for graph manipulation and traversal algorithms.": "Graph.java Supplier<E> getEdgeSupplier()",
    "Add an edge between two vertices in a graph data structure.": "Graph.java E addEdge(V sourceVertex, V targetVertex)",
    "This function adds an edge between two vertices in a graph data structure.": "Graph.java boolean addEdge(V sourceVertex, V targetVertex, E e)",
    "Adds a new vertex to a graph data structure.": "Graph.java V addVertex()",
    "Adds a new vertex to the graph data structure in the project.": "Graph.java boolean addVertex(V v)",
    "Check if there is an edge between two vertices in a graph data structure.": "Graph.java boolean containsEdge(V sourceVertex, V targetVertex)",
    "Check if a specific edge is present in the graph data structure.": "Graph.java boolean containsEdge(E e)",
    "Checks if a specific vertex is present in the graph data structure.": "Graph.java boolean containsVertex(V v)",
    "Returns a set of edges in the project, allowing for easy access and manipulation of edge data.": "Graph.java Set<E> edgeSet()",
    "Returns the degree of a specified vertex in a graph, indicating the number of edges connected to the vertex.": "Graph.java int degreeOf(V vertex)",
    "Returns a set of edges connected to a specified vertex in a graph data structure.": "Graph.java Set<E> edgesOf(V vertex)",
    "Returns the number of incoming edges to a specific vertex in a directed graph.": "Graph.java int inDegreeOf(V vertex)",
    "Returns a set of incoming edges connected to a specified vertex in a graph data structure.": "Graph.java Set<E> incomingEdgesOf(V vertex)",
    "Returns the number of outgoing edges from a specified vertex in a graph data structure.": "Graph.java int outDegreeOf(V vertex)",
    "Returns a set of outgoing edges from a specified vertex in a graph, essential for traversing and analyzing graph structures.": "Graph.java Set<E> outgoingEdgesOf(V vertex)",
    "Remove all edges from the graph that are contained in the specified collection of edges.": "Graph.java boolean removeAllEdges(Collection<? extends E> edges)",
    "This function removes all edges between two specified vertices in a graph data structure.": "Graph.java Set<E> removeAllEdges(V sourceVertex, V targetVertex)",
    "Remove all vertices from the graph that are contained in the specified collection.": "Graph.java boolean removeAllVertices(Collection<? extends V> vertices)",
    "This function removes an edge between two vertices in a graph data structure.": "Graph.java E removeEdge(V sourceVertex, V targetVertex)",
    "This function removes an edge from a graph data structure based on the given edge object.": "Graph.java boolean removeEdge(E e)",
    "This function removes a vertex from a graph data structure in a project.": "Graph.java boolean removeVertex(V v)",
    "Returns a set of all vertices in the graph, useful for iterating over all vertices in a graph.": "Graph.java Set<V> vertexSet()",
    "Returns the source vertex of a given edge in a graph data structure.": "Graph.java V getEdgeSource(E e)",
    "Returns the target vertex of a given edge in a graph data structure.": "Graph.java V getEdgeTarget(E e)",
    "Returns the type of graph used in the project for data visualization and analysis.": "Graph.java GraphType getType()",
    "This function retrieves the weight of an edge in a graph data structure.": "Graph.java double getEdgeWeight(E e)",
    "Set the weight of a specific edge in a graph data structure.": "Graph.java void setEdgeWeight(E e, double weight)",
    "Sets the weight of an edge between two vertices in a graph data structure.": "Graph.java void setEdgeWeight(V sourceVertex, V targetVertex, double weight)",
    "Provides an interface for iterating over vertices and edges in a graph data structure.": "Graph.java GraphIterables<V, E> iterables()",
    "Get corresponding vertex in the other graph direction for a given vertex in a graph.": "GraphMapping.java V getVertexCorrespondence(V vertex, boolean forward)",
    "Returns the corresponding edge in the opposite direction if 'forward' is false, within a project's graph data structure.": "GraphMapping.java E getEdgeCorrespondence(E edge, boolean forward)",
    "Function adds an edge with weight between two vertices in a graph.": "Graphs.java <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)",
    "This function adds an edge between two vertices in a graph, ensuring both vertices exist in the graph.": "Graphs.java <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)",
    "This function adds an edge between vertices from a source graph to a target graph.": "Graphs.java <V,\n        E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)",
    "This function adds an edge between two vertices in a graph with a specified weight.": "Graphs.java <V,\n        E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)",
    "This function adds vertices and edges from a source graph to a destination graph in a project.": "Graphs.java <V,\n        E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)",
    "Function adds reversed edges from a directed graph to another directed graph in a project.": "Graphs.java <V,\n        E> void addGraphReversed(Graph<? super V, ? super E> destination, Graph<V, E> source)",
    "This function adds all edges from a source graph to a destination graph in a project.": "Graphs.java <V, E> boolean addAllEdges(\n        Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)",
    "Function adds all vertices from a collection to a graph, returning true if any vertices were added.": "Graphs.java <V, E> boolean addAllVertices(\n        Graph<? super V, ? super E> destination, Collection<? extends V> vertices)",
    "This function returns a list of neighboring vertices of a given vertex in a graph.": "Graphs.java <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)",
    "This function returns a set of neighboring vertices of a given vertex in a graph.": "Graphs.java <V, E> Set<V> neighborSetOf(Graph<V, E> g, V vertex)",
    "This function retrieves the predecessor vertices of a given vertex in a graph data structure.": "Graphs.java <V, E> List<V> predecessorListOf(Graph<V, E> g, V vertex)",
    "This function returns a list of successor vertices of a given vertex in a graph.": "Graphs.java <V, E> List<V> successorListOf(Graph<V, E> g, V vertex)",
    "Converts a directed graph to an undirected graph, or returns the graph if already undirected.": "Graphs.java <V, E> Graph<V, E> undirectedGraph(Graph<V, E> g)",
    "This function tests if a vertex is incident to an edge in a graph. It is used for graph traversal algorithms.": "Graphs.java <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)",
    "Function to get the opposite vertex of an edge in a graph, essential for graph traversal algorithms.": "Graphs.java <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)",
    "Function removes a vertex while preserving connectivity in a graph data structure.": "Graphs.java <V, E> boolean removeVertexAndPreserveConnectivity(Graph<V, E> graph, V vertex)",
    "Function removes vertices from a graph while preserving connectivity based on a given predicate.": "Graphs.java <V,\n        E> boolean removeVerticesAndPreserveConnectivity(Graph<V, E> graph, Predicate<V> predicate)",
    "Function removes vertices while preserving connectivity in a graph data structure.": "Graphs.java <V,\n        E> boolean removeVertexAndPreserveConnectivity(Graph<V, E> graph, Iterable<V> vertices)",
    "Function adds outgoing edges from a source vertex to multiple target vertices in a graph data structure.": "Graphs.java <V, E> void addOutgoingEdges(Graph<V, E> graph, V source, Iterable<V> targets)",
    "This function adds incoming edges to a target vertex in a graph based on a list of source vertices.": "Graphs.java <V, E> void addIncomingEdges(Graph<V, E> graph, V target, Iterable<V> sources)",
    "This function checks if a vertex in a graph has any outgoing edges, useful for analyzing graph connectivity.": "Graphs.java <V, E> boolean vertexHasSuccessors(Graph<V, E> graph, V vertex)",
    "This function checks if a vertex in a graph has any incoming edges, useful for analyzing graph structures.": "Graphs.java <V, E> boolean vertexHasPredecessors(Graph<V, E> graph, V vertex)",
    "This function creates a mapping between vertices and integers in a graph for efficient processing.": "Graphs.java <V, E> VertexToIntegerMapping<V> getVertexToIntegerMapping(Graph<V, E> graph)",
    "This function retrieves the corresponding vertex in a mapping based on the direction specified.": "IsomorphicGraphMapping.java V getVertexCorrespondence(V v, boolean forward)",
    "This function retrieves the corresponding edge in a different graph based on vertex correspondences.": "IsomorphicGraphMapping.java E getEdgeCorrespondence(E e, boolean forward)",
    "Returns an unmodifiable map representing the forward mapping in the project, ensuring data integrity and consistency.": "IsomorphicGraphMapping.java Map<V, V> getForwardMapping()",
    "Returns an unmodifiable map representing the backward mapping within the project context.": "IsomorphicGraphMapping.java Map<V, V> getBackwardMapping()",
    "This function retrieves the domain values of a mapping in a project, ensuring they cannot be modified.": "IsomorphicGraphMapping.java Set<V> getMappingDomain()",
    "This function retrieves the range of values mapped in a bidirectional mapping within a project.": "IsomorphicGraphMapping.java Set<V> getMappingRange()",
    "This function checks if a vertex has a correspondence in the project, returning a boolean value.": "IsomorphicGraphMapping.java boolean hasVertexCorrespondence(V v)",
    "This function checks if a given edge has a correspondence in the project, returning a boolean value.": "IsomorphicGraphMapping.java boolean hasEdgeCorrespondence(E e)",
    "Function checks if two isomorphic graph mappings are equal within a project context.": "IsomorphicGraphMapping.java boolean equals(Object o)",
    "This function generates a unique hash code based on mappings and graph identities for efficient data storage and retrieval.": "IsomorphicGraphMapping.java int hashCode()",
    "This function generates a string representation of vertices in a graph for visualization purposes.": "IsomorphicGraphMapping.java String toString()",
    "Function to check if two graphs are valid isomorphisms in a project involving graph theory.": "IsomorphicGraphMapping.java boolean isValidIsomorphism()",
    "Function checks if two graph mappings have equal vertex correspondences in a project context.": "IsomorphicGraphMapping.java boolean isEqualMapping(GraphMapping<V, E> rel)",
    "Compose two isomorphic graph mappings to create a new mapping between two graphs.": "IsomorphicGraphMapping.java IsomorphicGraphMapping<V, E> compose(IsomorphicGraphMapping<V, E> otherMapping)",
    "This function creates a new HashMap with an expected size to optimize performance and memory usage in the project.": "CollectionUtil.java <K, V> HashMap<K, V> newHashMapWithExpectedSize(int expectedSize)",
    "This function creates a new LinkedHashMap with an expected size, optimizing memory usage in the project.": "CollectionUtil.java <K, V> LinkedHashMap<K, V> newLinkedHashMapWithExpectedSize(int expectedSize)",
    "This function creates a new HashSet with an expected size, optimizing memory allocation in a project.": "CollectionUtil.java <E> HashSet<E> newHashSetWithExpectedSize(int expectedSize)",
    "This function creates a new LinkedHashSet with an expected size, optimizing memory allocation in the project.": "CollectionUtil.java <E> LinkedHashSet<E> newLinkedHashSetWithExpectedSize(int expectedSize)",
    "Function calculates capacity needed for a HashMap based on size, considering default load factor.": "CollectionUtil.java int capacityForSize(int size)",
    "Function retrieves element at specified index from iterable, handling both List and Iterator implementations.": "CollectionUtil.java <E> E getElement(Iterable<E> iterable, int index)"
}