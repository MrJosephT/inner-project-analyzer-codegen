{
    "This function retrieves argument and return value sizes for a given type, optimizing memory usage.": "Symbol.java int getArgumentsAndReturnSizes()",
    "Copy bootstrap methods from class file buffer to symbol table entries for further processing.": "SymbolTable.java void copyBootstrapMethods(final ClassReader classReader, final char[] charBuffer)",
    "Returns the source class reader object for accessing and reading class files in the project.": "SymbolTable.java ClassReader getSource()",
    "This function returns the major version number of the project.": "SymbolTable.java int getMajorVersion()",
    "This function returns the name of the class within the project context.": "SymbolTable.java String getClassName()",
    "Sets major version and class name, adds class to constant pool, and returns index.": "SymbolTable.java int setMajorVersionAndClassName(final int majorVersion, final String className)",
    "This function returns the count of constant pool entries in the project's bytecode.": "SymbolTable.java int getConstantPoolCount()",
    "This function returns the length of the constant pool in a Java class file. It is used for metadata retrieval.": "SymbolTable.java int getConstantPoolLength()",
    "This function writes the constant pool data to a ByteVector in a Java bytecode manipulation project.": "SymbolTable.java void putConstantPool(final ByteVector output)",
    "Calculates size of bootstrap methods in class file for Java bytecode generation.": "SymbolTable.java int computeBootstrapMethodsSize()",
    "Put bootstrap methods into class file for dynamic language support in Java bytecode generation.": "SymbolTable.java void putBootstrapMethods(final ByteVector output)",
    "This function retrieves an entry from an array based on its hash code within a project.": "SymbolTable.java Entry get(final int hashCode)",
    "Function to put an entry into a hash table, resizing if necessary to maintain efficiency.": "SymbolTable.java Entry put(final Entry entry)",
    "This function adds an entry to a data structure and updates the entry count.": "SymbolTable.java void add(final Entry entry)",
    "This function adds various types of constants to a symbol table in a project.": "SymbolTable.java Symbol addConstant(final Object value)",
    "Add a constant class reference to the project's constant pool.": "SymbolTable.java Symbol addConstantClass(final String value)",
    "This function adds a constant field reference to a symbol table in a project.": "SymbolTable.java Symbol addConstantFieldref(final String owner, final String name, final String descriptor)",
    "Add method reference constant to symbol table for a given owner, name, and descriptor in project context.": "SymbolTable.java Symbol addConstantMethodref(final String owner, final String name, final String descriptor, final boolean isInterface)",
    "This function adds a constant member reference to the constant pool in a project.": "SymbolTable.java Entry addConstantMemberReference(final int tag, final String owner, final String name, final String descriptor)",
    "Function adds constant member reference to a list in a project for future reference.": "SymbolTable.java void addConstantMemberReference(final int index, final int tag, final String owner, final String name, final String descriptor)",
    "Add a constant string value to the project's constant pool for efficient reference and reuse.": "SymbolTable.java Symbol addConstantString(final String value)",
    "Adds a constant integer value to the symbol table in the project.": "SymbolTable.java Symbol addConstantInteger(final int value)",
    "Adds a constant float value to the symbol table in the project for use in calculations.": "SymbolTable.java Symbol addConstantFloat(final float value)",
    "Function adds constant integer or float symbol to a pool, preventing duplicates, in a project's symbol table.": "SymbolTable.java Symbol addConstantIntegerOrFloat(final int tag, final int value)",
    "Add constant integer or float value to a data structure entry in a project.": "SymbolTable.java void addConstantIntegerOrFloat(final int index, final int tag, final int value)",
    "Add a constant long value to the symbol table in the project.": "SymbolTable.java Symbol addConstantLong(final long value)",
    "Add a constant double value to the symbol table in the project for use in calculations or comparisons.": "SymbolTable.java Symbol addConstantDouble(final double value)",
    "Function adds a long or double constant to constant pool in project bytecode generation.": "SymbolTable.java Symbol addConstantLongOrDouble(final int tag, final long value)",
    "Add a constant long or double value to a data structure in the project.": "SymbolTable.java void addConstantLongOrDouble(final int index, final int tag, final long value)",
    "This function adds a constant name and type entry to a symbol table in a project.": "SymbolTable.java void addConstantNameAndType(final int index, final String name, final String descriptor)",
    "Add a constant UTF-8 value to the constant pool in a Java bytecode generation project.": "SymbolTable.java int addConstantUtf8(final String value)",
    "Add a constant UTF-8 value to a symbol table entry in a project.": "SymbolTable.java void addConstantUtf8(final int index, final String value)",
    "Add a constant method handle to the constant pool based on reference kind, owner, name, and descriptor.": "SymbolTable.java Symbol addConstantMethodHandle(final int referenceKind, final String owner, final String name, final String descriptor, final boolean isInterface)",
    "This function adds a constant method handle entry to a project's symbol table.": "SymbolTable.java void addConstantMethodHandle(final int index, final int referenceKind, final String owner, final String name, final String descriptor)",
    "Add a constant method type to the project by creating a UTF-8 reference with the given method descriptor.": "SymbolTable.java Symbol addConstantMethodType(final String methodDescriptor)",
    "This function adds a constant dynamic symbol to the project using a specified bootstrap method.": "SymbolTable.java Symbol addConstantDynamic(final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments)",
    "Add a constant invoke dynamic reference to a symbol table in a project.": "SymbolTable.java Symbol addConstantInvokeDynamic(final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments)",
    "This function adds a dynamic or invoke dynamic reference to the constant pool in a project.": "SymbolTable.java Symbol addConstantDynamicOrInvokeDynamicReference(final int tag, final String name, final String descriptor, final int bootstrapMethodIndex)",
    "Add a constant dynamic or invoke dynamic reference entry to a table with specified parameters.": "SymbolTable.java void addConstantDynamicOrInvokeDynamicReference(final int tag, final int index, final String name, final String descriptor, final int bootstrapMethodIndex)",
    "Add a constant module reference to a symbol in the project.": "SymbolTable.java Symbol addConstantModule(final String moduleName)",
    "Add a constant package reference to the symbol table for a given package name in the project.": "SymbolTable.java Symbol addConstantPackage(final String packageName)",
    "This function adds a constant UTF-8 reference to the constant pool in a project.": "SymbolTable.java Symbol addConstantUtf8Reference(final int tag, final String value)",
    "Function adds a constant UTF-8 reference to a data structure in a project for efficient storage and retrieval.": "SymbolTable.java void addConstantUtf8Reference(final int index, final int tag, final String value)",
    "Add a bootstrap method with handle and arguments to the symbol table in the project.": "SymbolTable.java Symbol addBootstrapMethod(final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments)",
    "Add a bootstrap method to the symbol table, checking for duplicates based on offset and hash code.": "SymbolTable.java Symbol addBootstrapMethod(final int offset, final int length, final int hashCode)",
    "Get symbol type from type table by index. Important for identifying data types in project.": "SymbolTable.java Symbol getType(final int typeIndex)",
    "This function adds a new type to a data structure in a project to avoid duplicate entries.": "SymbolTable.java int addType(final String value)",
    "Add uninitialized type to symbol table if not already present, based on value and bytecode offset.": "SymbolTable.java int addUninitializedType(final String value, final int bytecodeOffset)",
    "This function merges two types and adds the result to a symbol table in a project.": "SymbolTable.java int addMergedType(final int typeTableIndex1, final int typeTableIndex2)",
    "This function adds a new entry to a type table and returns the index within a project.": "SymbolTable.java int addTypeInternal(final Entry entry)",
    "This function generates a hash value by combining a tag and a value within a project.": "SymbolTable.java int hash(final int tag, final int value)",
    "This function generates a hash value based on a tag and a long value for data storage and retrieval.": "SymbolTable.java int hash(final int tag, final long value)",
    "This function generates a hash value for a given tag and string value within a project.": "SymbolTable.java int hash(final int tag, final String value)",
    "This function generates a hash value based on input tag, string value, and integer value for data processing.": "SymbolTable.java int hash(final int tag, final String value1, final int value2)",
    "This function generates a hash value based on a tag and the hash codes of two strings.": "SymbolTable.java int hash(final int tag, final String value1, final String value2)",
    "This function generates a hash value based on input values for use in data storage or retrieval.": "SymbolTable.java int hash(final int tag, final String value1, final String value2, final int value3)",
    "This function generates a hash value based on input values for use in data processing and storage.": "SymbolTable.java int hash(final int tag, final String value1, final String value2, final String value3)",
    "This function generates a hash value based on input values, used for data indexing and retrieval in a project.": "SymbolTable.java int hash(final int tag, final String value1, final String value2, final String value3, final int value4)"
}