{
    "Creates a successful result object with a code of 1.": "Result.java <T> Result<T> success()",
    "Function creates a successful result object with data and code for project operations.": "Result.java <T> Result<T> success(T object)",
    "This function generates an error result with a message and code for handling errors in the project.": "Result.java <T> Result<T> error(String msg)",
    "Main method to start Spring Boot application and log server start in project context.": "SkyApplication.java void main(String[] args)",
    "Save new category data from DTO to database and return success result in project.": "CategoryController.java Result<String> save(@RequestBody CategoryDTO categoryDTO)",
    "This function pages through categories and returns results in a project.": "CategoryController.java Result<PageResult> page(CategoryPageQueryDTO categoryPageQueryDTO)",
    "Delete category by ID, logging action and returning success result in project context.": "CategoryController.java Result<String> deleteById(Long id)",
    "Update category information in project, returning success result.": "CategoryController.java Result<String> update(@RequestBody CategoryDTO categoryDTO)",
    "Toggle category status in project based on input status and category ID.": "CategoryController.java Result<String> startOrStop(@PathVariable(\"status\") Integer status, Long id)",
    "This function lists categories based on type and returns a successful result within the project.": "CategoryController.java Result<List<Category>> list(Integer type)",
    "Uploads a file to AliOSS and returns the file path.": "CommonController.java Result<String> upload(MultipartFile file)",
    "Save new dish with flavor, clean cache data, and return success result in project.": "DishController.java Result save(@RequestBody DishDTO dishDTO)",
    "This function pages and retrieves dish data, providing a summary of results within the project.": "DishController.java Result<PageResult> page(DishPageQueryDTO dishPageQueryDTO)",
    "Delete multiple dishes, clear cache, and return success in dish management system.": "DishController.java Result delete (@RequestParam List<Long> ids)",
    "Get dish details by ID from service and return as Result for project functionality.": "DishController.java Result<DishVO> getById(@PathVariable Long id)",
    "Update dish with flavor, clear dish cache, and return success result in project.": "DishController.java Result update(@RequestBody DishDTO dishDTO)",
    "This function retrieves a list of dishes by category ID and returns it as a successful result.": "DishController.java Result<List<Dish>> list(Long categoryId)",
    "Toggle dish status and clear dish cache data in project context.": "DishController.java Result<String> startOrStop(@PathVariable Integer status, Long id)",
    "Function: Clean cache by deleting keys matching a specified pattern in Redis.\n\nDescription: Improves performance by removing outdated or unnecessary data stored in cache.": "DishController.java void cleanCache(String pattern)",
    "Employee login function generates JWT token for successful login in project.": "EmployeeController.java Result<EmployeeLoginVO> login(@RequestBody EmployeeLoginDTO employeeLoginDTO)",
    "Logout function for user session management, ensuring secure access control in the project.": "EmployeeController.java Result<String> logout()",
    "This function adds a new employee to the project by saving their details provided in the EmployeeDTO object.": "EmployeeController.java Result save(@RequestBody EmployeeDTO employeeDTO)",
    "This function handles employee pagination queries in the project, returning a Result object with the page results.": "EmployeeController.java Result<PageResult> page(EmployeePageQueryDTO employeePageQueryDTO)",
    "Toggle employee account status between active and inactive within project.": "EmployeeController.java Result startOrStop(@PathVariable Integer status,Long id)",
    "This function retrieves an employee by their ID and returns a successful result within a project.": "EmployeeController.java Result getById(@PathVariable Long  id)",
    "Update employee information in project, logging changes and returning success result.": "EmployeeController.java Result update(@RequestBody EmployeeDTO employeeDTO)",
    "This function searches orders based on specified conditions and returns the results as a page.": "OrderController.java Result<PageResult> conditionSearch(OrdersPageQueryDTO ordersPageQueryDTO)",
    "Calculate and return order statistics data for reporting and analysis purposes in the project.": "OrderController.java Result<OrderStatisticsVO> statistics()",
    "Retrieve order details by ID and return as a success result in a project.": "OrderController.java Result<OrderVO> details(@PathVariable(\"id\") Long id)",
    "Confirm orders and update status in the system.": "OrderController.java Result confirm(@RequestBody OrdersConfirmDTO ordersConfirmDTO)",
    "Handle order rejection requests by calling orderService.rejection method and returning success result.": "OrderController.java Result rejection(@RequestBody OrdersRejectionDTO ordersRejectionDTO) throws Exception",
    "Cancel an order in the project by calling the orderService cancel method.": "OrderController.java Result cancel(@RequestBody OrdersCancelDTO ordersCancelDTO) throws Exception",
    "This function marks an order as delivered in the project's system.": "OrderController.java Result delivery(@PathVariable(\"id\") Long id)",
    "Completes an order by calling orderService.complete() method, returning a success result in a project.": "OrderController.java Result complete(@PathVariable(\"id\") Long id)",
    "Calculate and return turnover statistics report within specified date range for project analysis and decision-making.": "ReportController.java Result<TurnoverReportVO> turnoverStatistics(\n            @DateTimeFormat(pattern = \"yyyy-MM-dd\")\n            LocalDate begin,\n            @DateTimeFormat(pattern = \"yyyy-MM-dd\")\n            LocalDate end)",
    "Generate user statistics report based on specified date range for project analysis and decision-making.": "ReportController.java Result<UserReportVO> userStatistics(\n            @DateTimeFormat(pattern = \"yyyy-MM-dd\") LocalDate begin,\n            @DateTimeFormat(pattern = \"yyyy-MM-dd\") LocalDate end)",
    "Generate order statistics report based on specified date range for project analysis and decision-making.": "ReportController.java Result<OrderReportVO> orderStatistics(\n            @DateTimeFormat(pattern = \"yyyy-MM-dd\")\n            LocalDate begin,\n            @DateTimeFormat(pattern = \"yyyy-MM-dd\")\n            LocalDate end)",
    "Generate top 10 sales report based on specified date range for project analysis and decision-making.": "ReportController.java Result<SalesTop10ReportVO> top10(\n            @DateTimeFormat(pattern = \"yyyy-MM-dd\") LocalDate begin,\n            @DateTimeFormat(pattern = \"yyyy-MM-dd\") LocalDate end)",
    "Exports business data using HttpServletResponse in the project.": "ReportController.java void export(HttpServletResponse response)",
    "Retrieve a set meal with dishes by ID and return as a success result.": "SetmealController.java Result<SetmealVO> getById(@PathVariable Long id)",
    "Save a set meal with dishes to database.": "SetmealController.java Result save(@RequestBody SetmealDTO setmealDTO)",
    "Delete multiple setmeal records by their IDs.": "SetmealController.java Result delete(@RequestBody List<Long> ids)",
    "This function retrieves a page of setmeal data and returns it as a successful result.": "SetmealController.java Result<PageResult> page(SetmealPageQueryDTO setmealPageQueryDTO)",
    "Toggle start or stop status of a set meal in the project.": "SetmealController.java Result startOrStop(@PathVariable Integer status, Long id)",
    "Set store's operating status in project, log status, update in Redis, return success.": "ShopController.java Result setStatus(@PathVariable Integer status)",
    "Get and log store status from Redis, returning as success result.": "ShopController.java Result<Integer> getStatus()",
    "Retrieve and return daily business data using workspace service for project analysis and reporting.": "WorkSpaceController.java Result<BusinessDataVO> businessData()",
    "This function retrieves and returns an overview of orders from the workspace service in the project.": "WorkSpaceController.java Result<OrderOverViewVO> orderOverView()",
    "Returns a summary of dish overview data from the workspace service in the project.": "WorkSpaceController.java Result<DishOverViewVO> dishOverView()",
    "Retrieve and return an overview of setmeal data for project analysis and reporting.": "WorkSpaceController.java Result<SetmealOverViewVO> setmealOverView()",
    "This function adds an AddressBook object to a list of AddressBooks within the project.": "AddressBookService.java List<AddressBook> list(AddressBook addressBook)",
    "Inserts a new address book into the project, allowing for storage and management of contact information.": "AddressBookMapper.java void insert(AddressBook addressBook)",
    "Retrieve an address book entry by its unique identifier for use in project operations.": "AddressBookMapper.java AddressBook getById(Long id)",
    "Update the address book with new information or changes, ensuring accurate and up-to-date contact details for users.": "AddressBookService.java void update(AddressBook addressBook)",
    "Update the default address flag for a specific user in the address book.": "AddressBookMapper.java void updateIsDefaultByUserId(AddressBook addressBook)",
    "Delete an entity by its unique identifier in the project, ensuring data integrity and maintaining database consistency.": "CategoryService.java void deleteById(Long id)",
    "Inserts a new category into the project's database.": "CategoryMapper.java void insert(Category category)",
    "Query categories based on specified criteria for pagination and display in project interface.": "CategoryMapper.java Page<Category> pageQuery(CategoryPageQueryDTO categoryPageQueryDTO)",
    "Update category information within the project to ensure accurate and up-to-date categorization of data.": "CategoryMapper.java void update(Category category)",
    "This function retrieves a list of categories based on a specified type within the project context.": "CategoryService.java List<Category> list(Integer type)",
    "Inserts a batch of DishFlavor objects into the database in one operation to improve performance.": "DishFlavorMapper.java void insertBatch(List<DishFlavor> flavors)",
    "Delete a dish from the database by its unique ID.": "DishFlavorMapper.java void deleteByDishId(Long id)",
    "Retrieve dish flavors by dish ID for menu customization and personalization in a restaurant management system.": "DishFlavorMapper.java List<DishFlavor> getByDishId(Long dishId)",
    "Count number of items by category ID in project database.": "DishMapper.java Integer countByCategoryId(Long categoryId)",
    "Inserts a new dish into the project's database of dishes.": "DishMapper.java void insert(Dish dish)",
    "Query dishes based on specified criteria and return as a paginated list of Dish Value Objects.": "DishMapper.java Page<DishVO> pageQuery(DishPageQueryDTO dishPageQueryDTO)",
    "Retrieve dish object by its unique identifier for display and manipulation within the project.": "DishMapper.java Dish getById(Long id)",
    "Update function to modify dish information within the project, ensuring accurate and up-to-date data.": "DishMapper.java void update(Dish dish)",
    "Returns a list of dishes based on a given dish in the project context.": "DishMapper.java List<Dish> list(Dish dish)",
    "Retrieve a list of dishes associated with a specific set meal ID.": "DishMapper.java List<Dish> getBySetmealId(Long setmealId)",
    "Count occurrences of each element in a map within a project to analyze data distribution.": "SetmealMapper.java Integer countByMap(Map map)",
    "Retrieve employee information by username for project tasks and communication.": "EmployeeMapper.java Employee getByUsername(String username)",
    "Inserts a new employee into the project's database.": "EmployeeMapper.java void insert(Employee employee)",
    "This function retrieves a page of employees based on specified criteria in a project.": "EmployeeMapper.java Page<Employee> pageQuery(EmployeePageQueryDTO employeePageQueryDTO)",
    "Update employee information within the project to ensure accurate and up-to-date records.": "EmployeeMapper.java void update(Employee employee)",
    "Retrieve employee information by their unique identifier for use in project tasks and decision-making processes.": "EmployeeMapper.java Employee getById(Long id)",
    "Inserts a batch of order details into the database in a single operation to improve efficiency.": "OrderDetailMapper.java void insertBatch(List<OrderDetail> orderDetails)",
    "Retrieve order details by order ID to provide specific information for a given order in the project.": "OrderDetailMapper.java List<OrderDetail> getByOrderId(Long orderId)",
    "Inserts a new order into the database.": "OrderMapper.java void insert(Orders order)",
    "Retrieve orders by their unique order number for processing and tracking within the project.": "OrderMapper.java Orders getByNumber(String orderNumber)",
    "Update orders information within the project to ensure accurate and up-to-date data for processing.": "OrderMapper.java void update(Orders orders)",
    "Query orders based on specified criteria and return a paginated result for display in the project.": "OrderMapper.java Page<Orders> pageQuery(OrdersPageQueryDTO  ordersPageQueryDTO)",
    "Retrieve an order by its unique identifier to provide detailed information within the project's order management system.": "OrderMapper.java Orders getById(Long id)",
    "This function counts the occurrences of a specific status within a project.": "OrderMapper.java Integer countStatus(Integer status)",
    "Retrieve orders with a specific status and ordered before a given time, for further processing in the project.": "OrderMapper.java List<Orders> getByStatusAndOrdertimeLT(Integer status, LocalDateTime orderTime)",
    "Calculates the sum of values in a map using a mapping function. Useful for aggregating data in a project.": "OrderMapper.java Double sumByMap(Map map)",
    "Get top 10 goods sales within a specified time frame for reporting and analysis purposes.": "OrderMapper.java List<GoodsSalesDTO> getSalesTop10(LocalDateTime begin, LocalDateTime end)",
    "Retrieve setmeal IDs associated with given dish IDs for menu customization in a restaurant management system.": "SetmealDishMapper.java List<Long> getSetmealIdsByDishIds(List<Long> dishIds)",
    "Delete a setmeal by its ID from the project database.": "SetmealDishMapper.java void deleteBySetmealId(Long setmealId)",
    "Update a dish in a set meal, ensuring accurate and up-to-date information for the project.": "SetmealDishMapper.java void update(SetmealDish dish)",
    "Inserts a batch of setmeal dishes into the database.": "SetmealDishMapper.java void insertBatch(List<SetmealDish> setmealDishes)",
    "Retrieve setmeal dishes by setmeal ID for menu management in a restaurant ordering system.": "SetmealDishMapper.java List<SetmealDish> getBySetmealId(Long setmealId)",
    "Count number of items by category ID in a project to track and analyze data efficiently.": "SetmealMapper.java Integer countByCategoryId(Long id)",
    "Inserts a new setmeal into the database within the project's meal management system.": "SetmealMapper.java void insert(Setmeal setmeal)",
    "Retrieve a setmeal by its unique identifier for display and selection within the project's meal planning system.": "SetmealMapper.java Setmeal getById(Long id)",
    "Query setmeal data based on specified criteria and return as a paginated list of SetmealVO objects.": "SetmealMapper.java Page<SetmealVO> pageQuery(SetmealPageQueryDTO setmealPageQueryDTO)",
    "Returns a list of set meals based on input criteria. Used for retrieving set meals in a project.": "SetmealMapper.java List<Setmeal> list(Setmeal setmeal)",
    "Retrieve a list of dish items associated with a specific set meal ID.": "SetmealMapper.java List<DishItemVO> getDishItemBySetmealId(Long setmealId)",
    "Returns a list of shopping carts based on the input shopping cart in the project's e-commerce system.": "ShoppingCartMapper.java List<ShoppingCart> list(ShoppingCart shoppingCart)",
    "Update the quantity of a specific item in the shopping cart based on its ID.": "ShoppingCartMapper.java void updateNumberById(ShoppingCart shoppingCart)",
    "Inserts a shopping cart object into the project, allowing for management and tracking of items.": "ShoppingCartMapper.java void insert(ShoppingCart shoppingCart)",
    "Delete user data by user ID to maintain data integrity and security in the project.": "ShoppingCartMapper.java void deleteByUserId(Long userId)",
    "Delete an entity by its unique identifier in the project, ensuring data integrity and removing unnecessary records.": "ShoppingCartMapper.java void deleteById(Long id)",
    "Inserts a batch of shopping cart items into the database in one operation to improve performance.": "ShoppingCartMapper.java void insertBatch(List<ShoppingCart> shoppingCartList)",
    "Retrieve user information by their unique openid identifier for project functionality and personalization.": "UserMapper.java User getByOpenid(String openid)",
    "Inserts a new user into the project's database.": "UserMapper.java void insert(User user)",
    "Retrieve user information by their unique identifier for project functionality and data retrieval.": "UserMapper.java User getById(Long userId)",
    "Count occurrences of elements in a map within a project to analyze data distribution efficiently.": "UserMapper.java Integer countByMap(Map map)",
    "Save the address book data to a storage location within the project, ensuring data persistence and accessibility.": "AddressBookService.java void save(AddressBook addressBook)",
    "Retrieve address book entry by unique identifier for display or modification in the project.": "AddressBookService.java AddressBook getById(Long id)",
    "Set default values for an address book, ensuring consistency and ease of use for users.": "AddressBookService.java void setDefault(AddressBook addressBook)",
    "Save category data in the project database.": "CategoryService.java void save(CategoryDTO categoryDTO)",
    "Query categories based on specified criteria for pagination in project context.": "CategoryService.java PageResult pageQuery(CategoryPageQueryDTO categoryPageQueryDTO)",
    "Update category information based on input data in the project's category management system.": "CategoryService.java void update(CategoryDTO categoryDTO)",
    "Function to start or stop a process based on status for a specific ID within the project.": "CategoryService.java void startOrStop(Integer status, Long id)",
    "Save dish with additional flavor information in the project's database.": "DishService.java void saveWithFlavor(DishDTO dishDTO)",
    "This function queries dishes based on specified criteria in a project.": "DishService.java PageResult pageQuery(DishPageQueryDTO dishPageQueryDTO)",
    "Delete multiple records by their IDs in a project to manage data efficiently.": "DishService.java void deleteBatch(List<Long> ids)",
    "Retrieve dish with flavor details by ID for display in project interface.": "DishService.java DishVO getByIdWithFlavor(Long id)",
    "Updates a dish with a new flavor in the project, ensuring accurate representation of dish information.": "DishService.java void updateWithFlavor(DishDTO dishDTO)",
    "Returns a list of dishes belonging to a specific category within the project's restaurant menu system.": "DishService.java List<Dish> list(Long categoryId)",
    "Function to start or stop a process based on status for a specific entity ID.": "DishService.java void startOrStop(Integer status, Long id)",
    "Returns a list of DishVO objects with the same flavor as the input Dish in the project.": "DishService.java List<DishVO> listWithFlavor(Dish dish)",
    "Employee login function verifies employee credentials for access to project resources.": "EmployeeService.java Employee login(EmployeeLoginDTO employeeLoginDTO)",
    "Save employee data from DTO object to database in project context.": "EmployeeService.java void save(EmployeeDTO employeeDTO)",
    "This function retrieves a paginated list of employees based on specified criteria for project management purposes.": "EmployeeService.java PageResult pageQuery(EmployeePageQueryDTO employeePageQueryDTO)",
    "Function to start or stop a process based on status and ID within a project.": "EmployeeService.java void startOrStop(Integer status, Long id)",
    "Retrieve employee information by their unique identifier for project tasks and reporting purposes.": "EmployeeService.java Employee getById(Long id)",
    "Update employee information in the project database based on input from the DTO object.": "EmployeeService.java void update(EmployeeDTO employeeDTO)",
    "Submit order with provided data for processing within the project's e-commerce platform.": "OrderService.java OrderSubmitVO submitOrder(OrdersSubmitDTO ordersSubmitDTO)",
    "Process payment for an order using provided payment details, ensuring successful transaction within the project.": "OrderService.java OrderPaymentVO payment(OrdersPaymentDTO ordersPaymentDTO) throws Exception",
    "Function to handle successful payment transactions by providing the outTradeNo identifier.": "OrderService.java void paySuccess(String outTradeNo)",
    "This function queries users based on status, returning results in paginated format within a project.": "OrderService.java PageResult pageQuery4User(int page, int pageSize, Integer status)",
    "Retrieve order details by ID for display in project interface.": "OrderService.java OrderVO details(Long id)",
    "Function cancels user by ID in project, handling exceptions.": "OrderService.java void userCancelById(Long id) throws Exception",
    "Repetition function repeats a specific action or process based on the provided ID within the project.": "OrderService.java void repetition(Long id)",
    "This function searches orders based on specified conditions and returns a paginated result.": "OrderService.java PageResult conditionSearch(OrdersPageQueryDTO ordersPageQueryDTO)",
    "Calculates and returns order statistics for analysis and decision-making within the project.": "OrderService.java OrderStatisticsVO statistics()",
    "Confirm orders based on DTO input to ensure accuracy and completion of transactions in the project.": "OrderService.java void confirm(OrdersConfirmDTO ordersConfirmDTO)",
    "Rejects orders based on specified criteria, ensuring efficient order processing and customer satisfaction.": "OrderService.java void rejection(OrdersRejectionDTO ordersRejectionDTO)",
    "Cancel orders based on provided DTO, handling exceptions.": "OrderService.java void cancel(OrdersCancelDTO ordersCancelDTO) throws Exception",
    "Function to handle delivery process for a specific order ID in the project.": "OrderService.java void delivery(Long id)",
    "Completes a task or process identified by the given ID within the project.": "OrderService.java void complete(Long id)",
    "Function sends a reminder to a user with the specified ID in the project.": "OrderService.java void reminder(Long id)",
    "Generate a report summarizing turnover data between specified dates for project analysis and decision-making.": "ReportService.java TurnoverReportVO getTurnover(LocalDate beginTime, LocalDate endTime)",
    "Generate a report on user statistics within a specified date range for project analysis and decision-making.": "ReportService.java UserReportVO getUserStatistics(LocalDate begin, LocalDate end)",
    "Generate a report summarizing order statistics within a specified date range for project analysis and decision-making.": "ReportService.java OrderReportVO getOrderStatistics(LocalDate begin, LocalDate end)",
    "Generate a report of the top 10 sales within a specified date range.": "ReportService.java SalesTop10ReportVO getSalesTop10(LocalDate begin, LocalDate end)",
    "Export business data to a file for external use, enhancing data accessibility and sharing capabilities.": "ReportService.java void exportBusinessData(HttpServletResponse response)",
    "Delete multiple records by their IDs in a project, improving data management efficiency.": "SetmealService.java void deleteBatch(List<Long> ids)",
    "Save setmeal data with associated dish information in the project.": "SetmealService.java void saveWithDish(SetmealDTO setmealDTO)",
    "Query setmeal data based on specified criteria for pagination and display in project interface.": "SetmealService.java PageResult pageQuery(SetmealPageQueryDTO setmealPageQueryDTO)",
    "Retrieve a set meal with dishes by its ID for display and selection in the project's menu system.": "SetmealService.java SetmealVO getByIdWithDish(Long id)",
    "Function to start or stop a process based on status for a specific ID in the project.": "SetmealService.java void startOrStop(Integer status, Long id)",
    "Returns a list of set meals based on input criteria. Used for displaying and managing set meals in the project.": "SetmealService.java List<Setmeal> list(Setmeal setmeal)",
    "Retrieve a dish item by its unique identifier from the database in a project related to food ordering.": "SetmealService.java List<DishItemVO> getDishItemById(Long id)",
    "Add a shopping cart to the system with the specified items and quantities selected by the user.": "ShoppingCartService.java void addShoppingCart(ShoppingCartDTO shoppingCartDTO)",
    "Display the items in the shopping cart for the user to review and potentially make changes.": "ShoppingCartService.java List<ShoppingCart> showShoppingCart()",
    "This function clears all items from the shopping cart to ensure a fresh start for the user.": "ShoppingCartService.java void cleanShoppingCart()",
    "Subtracts items from a shopping cart in the project, updating the cart's contents and total cost.": "ShoppingCartService.java void subShoppingCart(ShoppingCartDTO shoppingCartDTO)",
    "Function for user login using WeChat credentials, returning user information for project authentication and personalization.": "UserService.java User wxLogin(UserLoginDTO userLoginDTO)",
    "Retrieve business data within a specified time frame for analysis and reporting purposes.": "WorkspaceService.java BusinessDataVO getBusinessData(LocalDateTime begin, LocalDateTime end)",
    "Get an overview of orders in the project, providing a summary of order-related information.": "WorkspaceService.java OrderOverViewVO getOrderOverView()",
    "Get an overview of a dish for display in the project interface.": "WorkspaceService.java DishOverViewVO getDishOverView()",
    "Get an overview of setmeal information for display in the project interface.": "WorkspaceService.java SetmealOverViewVO getSetmealOverView()",
    "This function retrieves a list of address books from the database using a mapper in the project.": "AddressBookServiceImpl.java List<AddressBook> list(AddressBook addressBook)",
    "Save address book entry with current user ID and default status in project database.": "AddressBookServiceImpl.java void save(AddressBook addressBook)",
    "Retrieve an AddressBook object by its unique identifier from the database using the getById method.": "AddressBookServiceImpl.java AddressBook getById(Long id)",
    "Updates an address book entry in the project's database using the addressBookMapper.": "AddressBookServiceImpl.java void update(AddressBook addressBook)",
    "Set default address for user in address book by updating all addresses to non-default and setting one as default.": "AddressBookServiceImpl.java void setDefault(AddressBook addressBook)",
    "This function deletes a contact from the address book database by its unique ID.": "AddressBookServiceImpl.java void deleteById(Long id)",
    "Save category with disabled status and default values, using BeanUtils for property copying in project.": "CategoryServiceImpl.java void save(CategoryDTO categoryDTO)",
    "PageQuery function for category pagination in project, utilizing PageHelper and CategoryMapper.": "CategoryServiceImpl.java PageResult pageQuery(CategoryPageQueryDTO categoryPageQueryDTO)",
    "Delete category by ID after checking if it is related to dishes or set meals.": "CategoryServiceImpl.java void deleteById(Long id)",
    "Update category details with current user and time, using BeanUtils to map DTO to entity.": "CategoryServiceImpl.java void update(CategoryDTO categoryDTO)",
    "Toggle category status in project database based on input status and category ID.": "CategoryServiceImpl.java void startOrStop(Integer status, Long id)",
    "Retrieve a list of categories based on type for project functionality and organization.": "CategoryServiceImpl.java List<Category> list(Integer type)",
    "Save dish with flavors by mapping DTO to entity and inserting into database.": "DishServiceImpl.java void saveWithFlavor(DishDTO dishDTO)",
    "This function queries and paginates dishes in a project, returning total count and results.": "DishServiceImpl.java PageResult pageQuery(DishPageQueryDTO dishPageQueryDTO)",
    "Delete multiple dishes after checking if they are on sale or related to set meals.": "DishServiceImpl.java void deleteBatch(List<Long> ids)",
    "Get dish details with flavors by ID for display in project interface.": "DishServiceImpl.java DishVO getByIdWithFlavor(Long id)",
    "Update dish flavor information in database by copying properties, updating dish, deleting old flavors, and inserting new flavors.": "DishServiceImpl.java void updateWithFlavor(DishDTO dishDTO)",
    "This function retrieves a list of dishes based on a specified category ID.": "DishServiceImpl.java List<Dish> list(Long categoryId)",
    "Update dish status and stop related setmeal sales in restaurant management system.": "DishServiceImpl.java void startOrStop(Integer status, Long id)",
    "This function lists dishes with flavors by mapping dish data and adding corresponding flavors.": "DishServiceImpl.java List<DishVO> listWithFlavor(Dish dish)",
    "Employee login function verifies user credentials and returns employee object for project access.": "EmployeeServiceImpl.java Employee login(EmployeeLoginDTO employeeLoginDTO)",
    "This function saves employee data with default password and status in a project.": "EmployeeServiceImpl.java void save(EmployeeDTO employeeDTO)",
    "This function queries and paginates employee data in a project, returning total count and records.": "EmployeeServiceImpl.java PageResult pageQuery(EmployeePageQueryDTO employeePageQueryDTO)",
    "Function to start or stop an employee within a project by updating their status in the database.": "EmployeeServiceImpl.java void startOrStop(Integer status, Long id)",
    "This function retrieves an employee by ID and masks their password for security in a project.": "EmployeeServiceImpl.java Employee getById(Long id)",
    "Update employee information in database using data transfer object, within project's business logic.": "EmployeeServiceImpl.java void update(EmployeeDTO employeeDTO)",
    "Submit order, validate address, create order and order details, clear shopping cart, and return order details.": "OrderServiceImpl.java OrderSubmitVO submitOrder(OrdersSubmitDTO ordersSubmitDTO)",
    "Function: Update order status and send notification to clients.\nDescription: Updates order status after successful payment and sends notification to clients via WebSocket.": "OrderServiceImpl.java void paySuccess(String outTradeNo)",
    "Process payment for orders using WeChat Pay, returning payment details.": "OrderServiceImpl.java OrderPaymentVO payment(OrdersPaymentDTO ordersPaymentDTO)",
    "Query orders with details by user and status, returning paginated results.": "OrderServiceImpl.java PageResult pageQuery4User(int pageNum, int pageSize, Integer status)",
    "Retrieve order details and associated items, encapsulate into OrderVO for project display.": "OrderServiceImpl.java OrderVO details(Long id)",
    "Function: Cancel order by user with refund if necessary.\nRole: Handle user cancellation requests and process refunds in project order management.": "OrderServiceImpl.java void userCancelById(Long id) throws Exception",
    "Convert order details to shopping carts and add to database in project order processing.": "OrderServiceImpl.java void repetition(Long id)",
    "This function searches and returns orders with additional details, playing a key role in displaying order information.": "OrderServiceImpl.java PageResult conditionSearch(OrdersPageQueryDTO ordersPageQueryDTO)",
    "Order statistics function: Count orders by status and return in OrderStatisticsVO for project reporting.": "OrderServiceImpl.java OrderStatisticsVO statistics()",
    "Updates order status to confirmed based on input DTO in project's order processing module.": "OrderServiceImpl.java void confirm(OrdersConfirmDTO ordersConfirmDTO)",
    "Function: Handle order rejection and refund in project.\n\nRole: Ensure order status, process refund, and update order information.": "OrderServiceImpl.java void rejection(OrdersRejectionDTO ordersRejectionDTO)",
    "Cancel order and process refund if payment status is 1, update order status and details.": "OrderServiceImpl.java void cancel(OrdersCancelDTO ordersCancelDTO) throws Exception",
    "Delivery function updates order status to \"delivery in progress\" based on order ID.": "OrderServiceImpl.java void delivery(Long id)",
    "Complete order by updating status to completed and setting delivery time.": "OrderServiceImpl.java void complete(Long id)",
    "WebSocket reminder function for notifying users about their orders in real-time within the project.": "OrderServiceImpl.java void reminder(Long id)",
    "Transforms Orders into OrderVO with additional dish information for response in project.": "OrderServiceImpl.java List<OrderVO> getOrderVOList(Page<Orders> page)",
    "This function generates a string of ordered dishes for a given order in a restaurant management system.": "OrderServiceImpl.java String getOrderDishesStr(Orders orders)",
    "This function checks if delivery address is within 5km range of shop for order processing.": "OrderServiceImpl.java void checkOutOfRange(String address)",
    "Calculate daily turnover and generate a report for a specified date range in the project.": "ReportServiceImpl.java TurnoverReportVO getTurnover(LocalDate begin, LocalDate end)",
    "Calculate daily user statistics including new and total users within specified date range.": "ReportServiceImpl.java UserReportVO getUserStatistics(LocalDate begin, LocalDate end)",
    "Calculate daily order statistics within a specified date range for reporting purposes.": "ReportServiceImpl.java OrderReportVO getOrderStatistics(LocalDate begin, LocalDate end)",
    "Generate top 10 sales report by summarizing goods sales data within specified date range.": "ReportServiceImpl.java SalesTop10ReportVO getSalesTop10(LocalDate begin, LocalDate end)",
    "Export business data to Excel template for 30-day overview report in project management system.": "ReportServiceImpl.java void exportBusinessData(HttpServletResponse response)",
    "Calculate the count of orders with a specific status within a given time frame.": "ReportServiceImpl.java Integer getOrderCount(LocalDateTime beginTime, LocalDateTime endTime, Integer status)",
    "This function counts the number of users within a specified time frame in the project.": "ReportServiceImpl.java Integer getUserCount(LocalDateTime beginTime, LocalDateTime endTime)",
    "Save setmeal with associated dishes to database in project context.": "SetmealServiceImpl.java void saveWithDish(SetmealDTO setmealDTO)",
    "Delete multiple setmeal records and associated dish data based on status check.": "SetmealServiceImpl.java void deleteBatch(List<Long> ids)",
    "Retrieve setmeal details with associated dishes for display in project interface.": "SetmealServiceImpl.java SetmealVO getByIdWithDish(Long id)",
    "PageQuery function retrieves paginated setmeal data using PageHelper and returns total count and result list.": "SetmealServiceImpl.java PageResult pageQuery(SetmealPageQueryDTO setmealPageQueryDTO)",
    "Function to start or stop setmeal sales, checking for disabled dishes in setmeal.": "SetmealServiceImpl.java void startOrStop(Integer status, Long id)",
    "This function retrieves a list of set meals from the database in a project.": "SetmealServiceImpl.java List<Setmeal> list(Setmeal setmeal)",
    "Retrieve dish items by set meal ID from the database for use in the project.": "SetmealServiceImpl.java List<DishItemVO> getDishItemById(Long id)",
    "Add item to shopping cart, update quantity if item exists, insert new item if not.": "ShoppingCartServiceImpl.java void addShoppingCart(ShoppingCartDTO shoppingCartDTO)",
    "Retrieve shopping cart items for the current user in the project.": "ShoppingCartServiceImpl.java List<ShoppingCart> showShoppingCart()",
    "This function deletes all items in the shopping cart for the current user in the project.": "ShoppingCartServiceImpl.java void cleanShoppingCart()",
    "Subtracts quantity of a product in user's shopping cart by 1.": "ShoppingCartServiceImpl.java void subShoppingCart(ShoppingCartDTO shoppingCartDTO)",
    "Get openid from WeChat API for current user authentication in project.": "UserServiceImpl.java String getOpenid(String code)",
    "Function: User login with WeChat, register new users if needed.\nDescription: Handles user login process, registers new users if necessary.": "UserServiceImpl.java User wxLogin(UserLoginDTO userLoginDTO)",
    "Calculate and retrieve key business metrics for a specified time period in the project.": "WorkspaceServiceImpl.java BusinessDataVO getBusinessData(LocalDateTime begin, LocalDateTime end)",
    "Calculate and return an overview of order statuses in the project.": "WorkspaceServiceImpl.java OrderOverViewVO getOrderOverView()",
    "Get overview of dishes sold and discontinued in the project.": "WorkspaceServiceImpl.java DishOverViewVO getDishOverView()",
    "Get overview of setmeal sales and discontinued items for project reporting.": "WorkspaceServiceImpl.java SetmealOverViewVO getSetmealOverView()"
}