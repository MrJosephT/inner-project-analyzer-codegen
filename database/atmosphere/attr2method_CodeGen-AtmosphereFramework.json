{
    "String DEFAULT_ATMOSPHERE_CONFIG_PATH=\"/META-INF/atmosphere.xml\",String DEFAULT_LIB_PATH=\"/WEB-INF/lib/\",String DEFAULT_HANDLER_PATH=\"/WEB-INF/classes/\",String META_SERVICE=\"META-INF/services/\",String MAPPING_REGEX=\"[a-zA-Z0-9-&.*_~=@;\\\\?]+\",String ASYNC_IO=\"io.async\",Logger logger=LoggerFactory.getLogger(AtmosphereFramework.class),List<String> broadcasterFilters=newArrayList<>(),List<AsyncSupportListener> asyncSupportListeners=newArrayList<>(),List<AtmosphereResourceListener> atmosphereResourceListeners=newArrayList<>(),ArrayList<String> possibleComponentsCandidate=newArrayList<>(),HashMap<String,String> initParams=newHashMap<>(),AtmosphereConfig config,AtomicBoolean isCometSupportConfigured=newAtomicBoolean(false),boolean isFilter,Map<String,AtmosphereHandlerWrapper> atmosphereHandlers=newConcurrentHashMap<>(),ConcurrentLinkedQueue<String> broadcasterTypes=newConcurrentLinkedQueue<>(),ConcurrentLinkedQueue<String> objectFactoryType=newConcurrentLinkedQueue<>(),ConcurrentLinkedQueue<BroadcasterCacheInspector> inspectors=newConcurrentLinkedQueue<>(),String mappingRegex=MAPPING_REGEX,boolean useNativeImplementation,boolean useBlockingImplementation,boolean useStreamForFlushingComments=true,boolean useServlet30=true,AsyncSupport asyncSupport,String broadcasterClassName=DefaultBroadcaster.class.getName(),boolean isCometSupportSpecified,boolean isBroadcasterSpecified,boolean isSessionSupportSpecified,boolean isThrowExceptionOnClonedRequestSpecified,BroadcasterFactory broadcasterFactory,String broadcasterFactoryClassName,String broadcasterCacheClassName,boolean webSocketEnabled=true,String broadcasterLifeCyclePolicy=\"NEVER\",String webSocketProtocolClassName=SimpleHttpProtocol.class.getName(),WebSocketProtocol webSocketProtocol,String handlersPath=DEFAULT_HANDLER_PATH,ServletConfig servletConfig,boolean autoDetectHandlers=true,boolean hasNewWebSocketProtocol,String atmosphereDotXmlPath=DEFAULT_ATMOSPHERE_CONFIG_PATH,String metaServicePath=META_SERVICE,LinkedList<AtmosphereInterceptor> interceptors=newLinkedList<>(),boolean scanDone,String annotationProcessorClassName=\"org.atmosphere.cpr.DefaultAnnotationProcessor\",List<BroadcasterListener> broadcasterListeners=Collections.synchronizedList(newArrayList<>()),String webSocketProcessorClassName=DefaultWebSocketProcessor.class.getName(),boolean webSocketProtocolInitialized,EndpointMapper<AtmosphereHandlerWrapper> endpointMapper=newDefaultEndpointMapper<>(),String libPath=DEFAULT_LIB_PATH,boolean isInit,boolean sharedThreadPools=true,List<String> packages=newArrayList<>(),LinkedList<String> annotationPackages=newLinkedList<>(),boolean allowAllClassesScan=true,boolean annotationFound,boolean executeFirstSet,AtmosphereObjectFactory<?> objectFactory=newDefaultAtmosphereObjectFactory(),AtomicBoolean isDestroyed=newAtomicBoolean(),boolean externalizeDestroy,AnnotationProcessor annotationProcessor,List<String> excludedInterceptors=newArrayList<>(),LinkedList<BroadcasterCacheListener> broadcasterCacheListeners=newLinkedList<>(),List<BroadcasterConfig.FilterManipulator> filterManipulators=newArrayList<>(),AtmosphereResourceFactory arFactory,MetaBroadcaster metaBroadcaster,AtmosphereResourceSessionFactory sessionFactory,String defaultSerializerClassName,Class<Serializer> defaultSerializerClass,List<AtmosphereFrameworkListener> frameworkListeners=newLinkedList<>(),UUIDProvider uuidProvider=newDefaultUUIDProvider(),Thread shutdownHook,List<Class<?extendsAtmosphereInterceptor>> DEFAULT_ATMOSPHERE_INTERCEPTORS=newLinkedList<Class<?extendsAtmosphereInterceptor>>(){{add(CorsInterceptor.class);add(CacheHeadersInterceptor.class);add(PaddingAtmosphereInterceptor.class);add(AndroidAtmosphereInterceptor.class);add(HeartbeatInterceptor.class);add(SSEAtmosphereInterceptor.class);add(JSONPAtmosphereInterceptor.class);add(JavaScriptProtocol.class);add(WebSocketMessageSuspendInterceptor.class);add(OnDisconnectInterceptor.class);add(IdleResourceInterceptor.class);}},WebSocketFactory webSocketFactory,IllegalStateException initializationError,AtmosphereHandler REFLECTOR_ATMOSPHEREHANDLER=newAbstractReflectorAtmosphereHandler(){@OverridepublicvoidonRequest(AtmosphereResourceresource){logger.trace(\"VoidHandler {}\",resource.uuid());}@Overridepublicvoiddestroy(){logger.trace(\"VoidHandler\");}},AtmosphereHandler atmosphereHandler,Broadcaster broadcaster,String mapping,LinkedList<AtmosphereInterceptor> interceptors=newLinkedList<>(),boolean create,boolean needRequestScopedInjection,boolean wilcardMapping,MetaServiceProcedure procedure,AtomicBoolean done=newAtomicBoolean()": "AtmosphereFramework.java"
}