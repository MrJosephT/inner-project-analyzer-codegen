{
    "Logger logger=LoggerFactory.getLogger(AtmosphereResourceImpl.class),String PRE_SUSPEND=AtmosphereResourceImpl.class.getName()+\".preSuspend\",String SKIP_BROADCASTER_CREATION=AtmosphereResourceImpl.class.getName()+\".skipBroadcasterCreation\",String METEOR=Meteor.class.getName(),AtmosphereRequest req,AtmosphereResponse response,Action action=newAction(),List<Broadcaster> broadcasters=newCopyOnWriteArrayList<>(),Broadcaster broadcaster,AtmosphereConfig config,AsyncSupport<AtmosphereResourceImpl> asyncSupport,Serializer serializer,AtomicBoolean isInScope=newAtomicBoolean(true),AtmosphereResourceEventImpl event,AtomicBoolean isResumed=newAtomicBoolean(),AtomicBoolean isCancelled=newAtomicBoolean(),AtomicBoolean resumeOnBroadcast=newAtomicBoolean(),Object writeOnTimeout,boolean disableSuspend,AtomicBoolean disconnected=newAtomicBoolean(),ConcurrentLinkedQueue<AtmosphereResourceEventListener> listeners=newConcurrentLinkedQueue<>(),AtomicBoolean isSuspendEvent=newAtomicBoolean(),AtmosphereHandler atmosphereHandler,String uuid,HttpSession session,boolean disableSuspendEvent,TRANSPORT transport,boolean forceBinaryWrite,AtomicBoolean suspended=newAtomicBoolean(),WebSocket webSocket,AtomicBoolean inClosingPhase=newAtomicBoolean(),boolean closeOnCancel,AtomicBoolean isPendingClose=newAtomicBoolean()": "AtmosphereResourceImpl.java"
}