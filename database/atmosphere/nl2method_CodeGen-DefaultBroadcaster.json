{
    "Returns the ID of an object within the project, providing a unique identifier for reference and organization.": "BroadcastMessage.java String id()",
    "Returns the message object within the project context for further processing.": "BroadcastMessage.java Object message()",
    "This function retrieves the message object within the project.": "CacheMessage.java Object getMessage()",
    "Returns the unique identifier of an object within the project.": "CacheMessage.java String getId()",
    "This function converts a message object to a string for easy readability and output in the project.": "CacheMessage.java String toString()",
    "Function to retrieve the creation time of an object in the project.": "CacheMessage.java long getCreateTime()",
    "Generate and return a unique identifier for use in the project.": "CacheMessage.java String uuid()",
    "This function retrieves the life cycle policy for managing resources within the project's atmosphere.": "BroadcasterLifeCyclePolicy.java ATMOSPHERE_RESOURCE_POLICY getLifeCyclePolicy()",
    "Returns the time unit used within the project for measuring time durations.": "BroadcasterLifeCyclePolicy.java TimeUnit getTimeUnit()",
    "This function returns the timeout value set in the project, used for controlling the duration of certain operations.": "BroadcasterLifeCyclePolicy.java int getTimeout()",
    "Sets the atmosphere resource policy for the builder within the project.": "BroadcasterLifeCyclePolicy.java Builder policy(ATMOSPHERE_RESOURCE_POLICY policy)",
    "Sets the idle time in milliseconds for a builder object within a project.": "BroadcasterLifeCyclePolicy.java Builder idleTimeInMS(int time)",
    "Set the idle time for a builder in the project, specifying the duration and time unit.": "BroadcasterLifeCyclePolicy.java Builder idleTime(int time, TimeUnit timeUnit)",
    "This function builds a BroadcasterLifeCyclePolicy object with specified parameters for managing broadcaster lifecycle in the project.": "BroadcasterLifeCyclePolicy.java BroadcasterLifeCyclePolicy build()",
    "This function returns an object used for messaging within the project.": "BroadcastFilter.java Object message()",
    "This function returns an action within the project, providing a key component for project execution.": "BroadcastFilter.java ACTION action()",
    "Returns the original message object within the project context.": "BroadcastFilter.java Object originalMessage()",
    "Sets the original message in the project, allowing for reference or comparison with other messages.": "BroadcastFilter.java void setOriginalMsg(Object originalMsg)",
    "Filter broadcast messages for a specific broadcaster ID, returning the original message or a modified version.": "BroadcastFilter.java BroadcastAction filter(String broadcasterId, Object originalMessage, Object message)",
    "Initialize broadcaster with name, URI, and configuration settings for broadcasting messages in project.": "DefaultBroadcaster.java Broadcaster initialize(String name, URI uri, AtmosphereConfig config)",
    "Initialize broadcaster with given name and configuration for broadcasting messages to specified URI in project.": "DefaultBroadcaster.java Broadcaster initialize(String name, AtmosphereConfig config)",
    "Creates a broadcaster configuration for Atmosphere framework within a project context.": "DefaultBroadcaster.java BroadcasterConfig createBroadcasterConfig(AtmosphereConfig config)",
    "Function to destroy a broadcaster object, releasing resources and notifying listeners, within a project's broadcasting system.": "DefaultBroadcaster.java void destroy()",
    "Returns an unmodifiable collection of AtmosphereResource objects within the project, providing access to resources for manipulation.": "DefaultBroadcaster.java Collection<AtmosphereResource> getAtmosphereResources()",
    "This function sets the scope of a broadcaster within a project, potentially creating new broadcasters.": "DefaultBroadcaster.java void setScope(SCOPE scope)",
    "This function returns the scope of the project, providing a clear understanding of its boundaries and objectives.": "DefaultBroadcaster.java SCOPE getScope()",
    "Sets a unique ID for a broadcaster within the project, ensuring proper scope assignment and management.": "DefaultBroadcaster.java void setID(String id)",
    "This function renames a broadcaster within the project by changing its name to the provided ID.": "DefaultBroadcaster.java Broadcaster rename(String id)",
    "Returns the ID of an object within the project for identification and reference purposes.": "DefaultBroadcaster.java String getID()",
    "Resumes all AtmosphereResources in a synchronized manner and removes them from the list.": "DefaultBroadcaster.java void resumeAll()",
    "This function releases any external resources used within the project to free up memory and improve performance.": "DefaultBroadcaster.java void releaseExternalResources()",
    "Sets the broadcaster's life cycle policy and notifies the lifecycle handler in a project.": "DefaultBroadcaster.java void setBroadcasterLifeCyclePolicy(final BroadcasterLifeCyclePolicy lifeCyclePolicy)",
    "This function returns the BroadcasterLifeCyclePolicy within the project, providing guidelines for broadcaster lifecycle management.": "DefaultBroadcaster.java BroadcasterLifeCyclePolicy getBroadcasterLifeCyclePolicy()",
    "This function adds a listener for broadcaster life cycle events in the project.": "DefaultBroadcaster.java void addBroadcasterLifeCyclePolicyListener(BroadcasterLifeCyclePolicyListener b)",
    "This function removes a BroadcasterLifeCyclePolicyListener from the list of listeners in the project.": "DefaultBroadcaster.java void removeBroadcasterLifeCyclePolicyListener(BroadcasterLifeCyclePolicyListener b)",
    "This function checks if an object has been destroyed in the project.": "DefaultBroadcaster.java boolean isDestroyed()",
    "This function waits for resources and then broadcasts an object within a project's Atmosphere framework.": "DefaultBroadcaster.java Future<Object> awaitAndBroadcast(Object t, long time, TimeUnit timeUnit)",
    "Adds a new broadcaster listener to the list of listeners for the broadcaster in the project.": "DefaultBroadcaster.java Broadcaster addBroadcasterListener(BroadcasterListener b)",
    "Function removes a broadcaster listener from the list in a project.": "DefaultBroadcaster.java Broadcaster removeBroadcasterListener(BroadcasterListener b)",
    "Broadcast handler for delivering messages to clients in a thread-safe manner.": "DefaultBroadcaster.java Runnable getBroadcastHandler()",
    "This function runs a message broadcasting loop, handling interruptions and submitting tasks for out-of-order broadcasting.": "DefaultBroadcaster.java void run()",
    "Async write handler for managing write queue in project, ensuring messages are sent efficiently.": "DefaultBroadcaster.java Runnable getAsyncWriteHandler(final WriteQueue writeQueue)",
    "Function: start()\n\nRole: Initiates broadcaster cache and spawns reactor if not already started in project context.": "DefaultBroadcaster.java void start()",
    "Spawn reactor threads for handling broadcast and async write operations in project execution.": "DefaultBroadcaster.java void spawnReactor()",
    "This function cancels all reactive threads in the project to prevent further execution.": "DefaultBroadcaster.java void killReactiveThreads()",
    "This function calculates the number of reactive threads needed based on available processors for optimal performance.": "DefaultBroadcaster.java int reactiveThreadsCount()",
    "Function pushes a delivery to a queue, ensuring delivery is processed in project context.": "DefaultBroadcaster.java void push(Deliver deliver)",
    "This function delivers messages to clients and handles caching and filtering in a broadcasting project.": "DefaultBroadcaster.java void deliverPush(Deliver deliver, boolean rec)",
    "Ends broadcast delivery, clears cache, and marks entry as done in a project's broadcast functionality.": "DefaultBroadcaster.java boolean endBroadcast(Deliver deliver, AtmosphereResource r, CacheMessage cacheMsg, boolean deliverMessage)",
    "Queue write operation for async or blocking delivery to AtmosphereResources in a project.": "DefaultBroadcaster.java void queueWriteIO(AtmosphereResource r, Deliver deliver, AtomicInteger count) throws InterruptedException",
    "Execute blocking write operation for delivering messages to clients using calling thread in Atmosphere framework.": "DefaultBroadcaster.java void executeBlockingWrite(AtmosphereResource r, Deliver deliver, AtomicInteger count) throws InterruptedException",
    "Converts queue of AsyncWriteTokens to list of strings for project output or processing.": "DefaultBroadcaster.java List<String> asString()",
    "This function filters messages for each request, allowing for modification or blocking before broadcasting.": "DefaultBroadcaster.java boolean perRequestFilter(AtmosphereResource r, Deliver msg)",
    "This function calls a callable object and handles exceptions, used for executing tasks within a project.": "DefaultBroadcaster.java Object callable(Object msg)",
    "Async write message to AtmosphereResource, handling resuming and caching, with event listeners and error handling.": "DefaultBroadcaster.java void executeAsyncWrite(final AsyncWriteToken token)",
    "This function determines whether to cache a message based on the presence of specific methods in the stack trace.": "DefaultBroadcaster.java boolean cacheMessageOnIOException(Throwable cause)",
    "Function to check and push cached messages to AtmosphereResource with event handling in project broadcasting system.": "DefaultBroadcaster.java boolean checkCachedAndPush(final AtmosphereResource r, final AtmosphereResourceEvent e)",
    "Function: Retrieve tracked broadcast from cache.\nDescription: Checks and retrieves missed messages for a specific AtmosphereResource based on its UUID.": "DefaultBroadcaster.java boolean retrieveTrackedBroadcast(final AtmosphereResource r, final AtmosphereResourceEvent e)",
    "Invokes onStateChange method on AtmosphereResource's handler, handling exceptions, in a broadcasting project.": "DefaultBroadcaster.java void invokeOnStateChange(final AtmosphereResource r, final AtmosphereResourceEvent e)",
    "Function prepares and invokes state change event handling, including write timeout registration.": "DefaultBroadcaster.java void prepareInvokeOnStateChange(final AtmosphereResource r, final AtmosphereResourceEvent e)",
    "Function handles write timeout for Atmosphere framework, interrupting thread or canceling resource if necessary.": "DefaultBroadcaster.java Object call() throws Exception",
    "This function is empty and does not perform any specific task within the project context.": "DefaultBroadcaster.java void interrupt()",
    "Handles exceptions by calling another method with default parameter value in an Atmosphere framework project.": "DefaultBroadcaster.java void onException(Throwable t, final AtmosphereResource ar)",
    "Function handles exceptions during write operations, notifies listeners, caches lost messages, and resumes connection.": "DefaultBroadcaster.java void onException(Throwable t, final AtmosphereResource ar, boolean notifyAndCache)",
    "Cache lost message with token from request attribute in Atmosphere framework for improved performance and reliability.": "DefaultBroadcaster.java void cacheLostMessage(AtmosphereResource r, boolean force)",
    "Cache lost message for AtmosphereResource with AsyncWriteToken in project to handle lost messages efficiently.": "DefaultBroadcaster.java void cacheLostMessage(AtmosphereResource r, AsyncWriteToken token)",
    "Cache lost message for broadcasting to subscribers, ensuring message delivery in case of connection loss.": "DefaultBroadcaster.java void cacheLostMessage(AtmosphereResource r, AsyncWriteToken token, boolean force)",
    "Sets the maximum suspend resource and policy for suspending operations within the project.": "DefaultBroadcaster.java void setSuspendPolicy(long maxSuspendResource, POLICY policy)",
    "Broadcasts a message to resources, filtering and delivering asynchronously, handling destruction and interruptions.": "DefaultBroadcaster.java Future<Object> broadcast(Object msg)",
    "Notifies broadcast listener and returns a future object with a done status and message.": "DefaultBroadcaster.java BroadcasterFuture<Object> futureDone(Object msg)",
    "Dispatches incoming messages for processing, ensuring efficient handling within the project's messaging system.": "DefaultBroadcaster.java void dispatchMessages(Deliver e)",
    "Broadcasts a message to subscribed clients, filtering and delivering it asynchronously.": "DefaultBroadcaster.java Future<Object> broadcast(Object msg, AtmosphereResource r)",
    "Broadcasts a message to all resources on project resume, returning a future for completion.": "DefaultBroadcaster.java Future<Object> broadcastOnResume(Object msg)",
    "Broadcasts messages to all connected clients upon resuming connection, ensuring all clients receive the same updates.": "DefaultBroadcaster.java void broadcastOnResume(AtmosphereResource r)",
    "Broadcasts a message to a subset of AtmosphereResources and returns a future object for the message.": "DefaultBroadcaster.java Future<Object> broadcast(Object msg, Set<AtmosphereResource> subset)",
    "Function adds AtmosphereResource to Broadcaster, handling resource limits and duplicates.": "DefaultBroadcaster.java Broadcaster addAtmosphereResource(AtmosphereResource r)",
    "Cache and suspend AtmosphereResource, associating it with Broadcaster and notifying parent resources if applicable.": "DefaultBroadcaster.java void cacheAndSuspend(AtmosphereResource r)",
    "Registers AtmosphereResource, adds to resources list, sets broadcaster, and notifies listeners of resource addition.": "DefaultBroadcaster.java void notifyAndAdd(AtmosphereResource r)",
    "Function to check if AtmosphereResource is valid for use in project, ensuring it is active and in scope.": "DefaultBroadcaster.java boolean isAtmosphereResourceValid(AtmosphereResource r)",
    "Notifies listener and marks completion of entry in project, ensuring proper functioning and communication.": "DefaultBroadcaster.java void entryDone(final BroadcasterFuture<?> f)",
    "Notify all listeners of broadcast event completion, handling exceptions and logging errors.": "DefaultBroadcaster.java void notifyBroadcastListener()",
    "Notify all broadcaster listeners when a new atmosphere resource is added.": "DefaultBroadcaster.java void notifyOnAddAtmosphereResourceListener(AtmosphereResource r)",
    "Notify all broadcaster listeners when an AtmosphereResource is removed from the broadcaster.": "DefaultBroadcaster.java void notifyOnRemoveAtmosphereResourceListener(AtmosphereResource r)",
    "Notify all broadcaster listeners of a new message delivery, handling exceptions and logging errors.": "DefaultBroadcaster.java void notifyOnMessage(Deliver deliver)",
    "This function removes an AtmosphereResource from a broadcaster in a project.": "DefaultBroadcaster.java Broadcaster removeAtmosphereResource(AtmosphereResource r)",
    "Function: Remove AtmosphereResource from Broadcaster in project.\nDescription: Handles removal of AtmosphereResource and associated tasks.": "DefaultBroadcaster.java Broadcaster removeAtmosphereResource(AtmosphereResource r, boolean executeDone)",
    "Sets the configuration for the broadcaster within the project.": "DefaultBroadcaster.java void setBroadcasterConfig(BroadcasterConfig bc)",
    "Get the BroadcasterConfig object for configuring broadcasting settings in the project.": "DefaultBroadcaster.java BroadcasterConfig getBroadcasterConfig()",
    "This function delays broadcasting an object, with optional delay time and callback function.": "DefaultBroadcaster.java Future<Object> delayBroadcast(Object o)",
    "Delay broadcast message delivery in project context for future execution.": "DefaultBroadcaster.java Future<Object> delayBroadcast(final Object o, long delay, TimeUnit t)",
    "Function schedules fixed broadcasts at regular intervals within a project to deliver content consistently.": "DefaultBroadcaster.java Future<Object> scheduleFixedBroadcast(final Object o, long period, TimeUnit t)",
    "Schedule fixed broadcast of filtered messages with delay and periodicity for project communication system.": "DefaultBroadcaster.java Future<Object> scheduleFixedBroadcast(final Object o, long waitFor, long period, TimeUnit t)",
    "This function returns a summary of the object's name, resources, and broadcaster cache within the project.": "DefaultBroadcaster.java String toString()",
    "This function checks if the last broadcast has been sent in a project.": "DefaultBroadcaster.java boolean lastBroadcasted()",
    "Converts time periods between different TimeUnit representations in a project.": "DefaultBroadcaster.java long translateTimeUnit(long period, TimeUnit tu)",
    "Notify listeners of broadcaster pre-destroy event, logging and handling exceptions.": "DefaultBroadcaster.java boolean notifyOnPreDestroy()",
    "Returns a collection of broadcaster listeners for event notifications in the project.": "DefaultBroadcaster.java Collection<BroadcasterListener> broadcasterListeners()",
    "Returns the BroadcasterLifeCyclePolicy used in the project for managing broadcaster lifecycle events.": "DefaultBroadcaster.java BroadcasterLifeCyclePolicy lifeCyclePolicy()",
    "This function returns a ConcurrentLinkedQueue of BroadcasterLifeCyclePolicyListeners for managing life cycle events in the project.": "DefaultBroadcaster.java ConcurrentLinkedQueue<BroadcasterLifeCyclePolicyListener> lifeCycleListeners()",
    "Function provides access to messages in a blocking queue for processing within the project.": "DefaultBroadcaster.java BlockingQueue<Deliver> messages()",
    "Returns a ConcurrentHashMap of write queues used for efficient writing operations in a project.": "DefaultBroadcaster.java ConcurrentHashMap<String, WriteQueue> writeQueues()",
    "This function returns the policy within the project context in no more than 20 words.": "DefaultBroadcaster.java POLICY policy()",
    "This function checks if out-of-order broadcast is supported in the project, returning a boolean value.": "DefaultBroadcaster.java boolean outOfOrderBroadcastSupported()",
    "Function returns recent activity status in project, using AtomicBoolean for thread safety.": "DefaultBroadcaster.java AtomicBoolean recentActivity()",
    "Returns the lifecycle handler used for managing component lifecycles in the project.": "DefaultBroadcaster.java LifecycleHandler lifecycleHandler()",
    "Registers a lifecycle handler for managing component lifecycle events in the project.": "DefaultBroadcaster.java DefaultBroadcaster lifecycleHandler(LifecycleHandler lifecycleHandler)",
    "Returns the current lifecycle task in a project for monitoring and tracking progress.": "DefaultBroadcaster.java Future<?> currentLifecycleTask()",
    "Sets the current lifecycle task for the DefaultBroadcaster in the project.": "DefaultBroadcaster.java DefaultBroadcaster currentLifecycleTask(Future<?> currentLifecycleTask)",
    "This function handles post-creation actions for DefaultBroadcasters in the project, utilizing a lifecycle handler.": "BroadcasterLifecyclePolicyHandler.java void onPostCreate(Broadcaster b)",
    "This function handles the destruction of a broadcaster object in a project, executing any necessary cleanup operations.": "BroadcasterLifecyclePolicyHandler.java void onPreDestroy(Broadcaster b)",
    "Remove AtmosphereResource from Broadcaster, trigger lifecycle offIfEmpty if present, in project broadcasting events.": "BroadcasterLifecyclePolicyHandler.java void onRemoveAtmosphereResource(Broadcaster b, AtmosphereResource r)",
    "Lifecycle handler for managing broadcaster lifecycle policies in project, including idle, resume, and destroy behaviors.": "LifecycleHandler.java LifecycleHandler on(final DefaultBroadcaster broadcaster)",
    "This function manages the lifecycle policies of a broadcaster within the project.": "LifecycleHandler.java void run()",
    "Function to destroy AtmosphereResource and resume or close connections in a project.": "LifecycleHandler.java void destroy(boolean resume)",
    "LifecycleHandler offIfEmpty function removes broadcaster if no resources, based on configuration and scope.": "LifecycleHandler.java LifecycleHandler offIfEmpty(DefaultBroadcaster broadcaster)",
    "Stop the current lifecycle task and notify destroy listeners in a project's broadcasting system.": "LifecycleHandler.java LifecycleHandler off(DefaultBroadcaster broadcaster)",
    "Notify all idle listeners in the default broadcaster about the broadcaster being idle.": "LifecycleHandler.java void notifyIdleListener(DefaultBroadcaster broadcaster)",
    "This function notifies all listeners when a broadcaster is destroyed in the project.": "LifecycleHandler.java void notifyDestroyListener(DefaultBroadcaster broadcaster)",
    "Notify all listeners when broadcaster becomes empty in a project with broadcasting functionality.": "LifecycleHandler.java void notifyEmptyListener(DefaultBroadcaster broadcaster)",
    "Configure broadcaster lifecycle policy and poolable provider for tracked broadcasters in project.": "PoolableBroadcasterFactory.java void configure(String broadcasterLifeCyclePolicy)",
    "Retrieves a broadcaster object by its pooled ID within the project context.": "PoolableBroadcasterFactory.java Broadcaster get()",
    "This function adds a broadcaster to a pool and returns it, used for managing resources efficiently in a project.": "PoolableBroadcasterFactory.java boolean add(Broadcaster b, Object id)",
    "This function removes a broadcaster from a pool or store within a project context.": "PoolableBroadcasterFactory.java boolean remove(Broadcaster b, Object id)",
    "Lookup and return a broadcaster object based on provided class, ID, and creation parameters in a project.": "PoolableBroadcasterFactory.java <T extends Broadcaster> T lookup(Class<T> c, Object id, boolean createIfNull, boolean unique)",
    "This function removes an AtmosphereResource, with an option to track pooled broadcasters, in a logging context.": "PoolableBroadcasterFactory.java void removeAllAtmosphereResource(AtmosphereResource r)",
    "Remove object from pool if tracking enabled, else log error.": "PoolableBroadcasterFactory.java boolean remove(Object id)",
    "LookupAll function retrieves broadcasters from a collection based on project requirements, supporting data retrieval operations.": "PoolableBroadcasterFactory.java Collection<Broadcaster> lookupAll()",
    "This function creates a pooled broadcaster within the project for broadcasting messages efficiently.": "PoolableBroadcasterFactory.java Broadcaster createBroadcaster()",
    "Factory method to create broadcasters and track their usage in a project.": "PoolableBroadcasterFactory.java PoolableBroadcasterFactory trackPooledBroadcaster(boolean trackPooledBroadcaster)",
    "Function returns boolean value indicating if pooled broadcaster is being tracked in project.": "PoolableBroadcasterFactory.java boolean trackPooledBroadcaster()",
    "Provides a poolable provider for broadcasters in the project for efficient resource management.": "PoolableBroadcasterFactory.java PoolableProvider<? extends Broadcaster, ?> poolableProvider()",
    "Factory method for creating poolable broadcasters with configurable settings for project scalability and resource management.": "PoolableBroadcasterFactory.java PoolableBroadcasterFactory poolableProvider(PoolableProvider<? extends Broadcaster, ?> poolableProvider)",
    "Function determines if WebSocket is enabled based on request headers and configuration in project context.": "Utils.java boolean webSocketEnabled(HttpServletRequest request)",
    "Function checks if HTTP request is for a raw WebSocket connection in a project.": "Utils.java boolean rawWebSocket(HttpServletRequest request)",
    "This function checks if WebSocket is enabled for Firefox browser in a project.": "Utils.java boolean firefoxWebSocketEnabled(HttpServletRequest request)",
    "Determines if a given transport type allows for two connections in an Atmosphere project.": "Utils.java boolean twoConnectionsTransport(AtmosphereResource.TRANSPORT t)",
    "This function checks if a WebSocket query string is present or null for handling different client frameworks.": "Utils.java boolean webSocketQueryStringPresentOrNull(HttpServletRequest request)",
    "Determines if a given transport type can be resumed in the project, allowing for continued data transfer.": "Utils.java boolean resumableTransport(AtmosphereResource.TRANSPORT t)",
    "This function determines if a given transport type is pollable for handling in an Atmosphere project.": "Utils.java boolean pollableTransport(AtmosphereResource.TRANSPORT t)",
    "This function determines if a message can be pushed to a client using specified transport methods.": "Utils.java boolean pushMessage(AtmosphereResource.TRANSPORT t)",
    "This function checks if the atmosphere protocol is enabled based on a specific header in the request.": "Utils.java boolean atmosphereProtocol(AtmosphereRequest r)",
    "Check if a WebSocket message is present in the AtmosphereResource request within the project context.": "Utils.java boolean webSocketMessage(AtmosphereResource r)",
    "Check if HTTP request follows proper protocol for upgrading to WebSocket connection in project context.": "Utils.java boolean properProtocol(HttpServletRequest request)",
    "Role: Retrieve parent AtmosphereResource for WebSocket connections.\nDescription: Ensures proper handling of WebSocket connections within the project.": "Utils.java AtmosphereResource websocketResource(AtmosphereResource r)",
    "This function checks if a request is a close message for disconnecting a transport in the project.": "Utils.java boolean closeMessage(HttpServletRequest request)",
    "Dynamic method invocation for proxied instances with error logging and parameter handling.": "Utils.java Object invoke(final Object proxiedInstance, Method m, Object o)",
    "Injects dependencies into AtmosphereResource using InjectableObjectFactory in project's runtime environment.": "Utils.java void inject(AtmosphereResource r) throws IllegalAccessException",
    "Injects an object into the request scope for the given class within the Atmosphere project.": "Utils.java void inject(Object object, Class<?> clazz, AtmosphereResource r) throws IllegalAccessException",
    "Injects an object into the AtmosphereConfig framework for request-scoped usage within the project.": "Utils.java void inject(Object object, Class<?> clazz, AtmosphereConfig config) throws IllegalAccessException",
    "Injects WebSocket handler from AtmosphereResource for use in project's WebSocket functionality.": "Utils.java Object injectWith(AtmosphereResource r)",
    "Injects object based on handler type for project functionality.": "Utils.java Object injectWith(AtmosphereHandler h)",
    "This function retrieves all private fields inherited by a class, excluding synthetic fields.": "Utils.java Set<Field> getInheritedPrivateFields(Class<?> type)",
    "This function retrieves all private inherited methods from a given class for analysis or reflection purposes.": "Utils.java Set<Method> getInheritedPrivateMethod(Class<?> type)",
    "Checks if handler requires request-scoped injection using Atmosphere framework's object factory.": "Utils.java boolean requestScopedInjection(AtmosphereConfig config, AtmosphereHandler h)",
    "Check if object requires request-scoped injection in Atmosphere framework.": "Utils.java boolean requestScopedInjection(AtmosphereConfig config, Object o)",
    "Function: destroyMeteor\nRole: Destroy a Meteor object within the project's AtmosphereRequest context.\nDescription: Ensures proper cleanup of Meteor objects to prevent memory leaks.": "Utils.java void destroyMeteor(AtmosphereRequest req)",
    "This function retrieves the path information from the AtmosphereRequest object and returns it for project routing purposes.": "Utils.java String pathInfo(AtmosphereRequest request)",
    "Function checks if test is running in project, used to control behavior during testing.": "Utils.java boolean isRunningTest()",
    "This function checks if the project is running under JDK 11 or above.": "Utils.java boolean isUnderJDK11AndUp()"
}