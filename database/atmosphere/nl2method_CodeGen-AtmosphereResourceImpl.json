{
    "Initialize AtmosphereResource with config, broadcaster, request, response, asyncSupport, and atmosphereHandler for handling server-sent events.": "AtmosphereResourceImpl.java AtmosphereResource initialize(AtmosphereConfig config, Broadcaster broadcaster,\n                                         AtmosphereRequest req, AtmosphereResponse response,\n                                         AsyncSupport asyncSupport, AtmosphereHandler atmosphereHandler)",
    "Sets the UUID for a specific object within the project, allowing for unique identification and tracking.": "AtmosphereResourceImpl.java void setUUID(String uuid)",
    "Register UUID for finding candidate if transport is not pollable and message is not WebSocket in project.": "AtmosphereResourceImpl.java void register()",
    "Configure transport type based on request header for Atmosphere framework in a project.": "AtmosphereResourceImpl.java TRANSPORT configureTransport()",
    "Returns the AtmosphereResourceEvent for handling events in the project's atmosphere framework.": "AtmosphereResourceImpl.java AtmosphereResourceEventImpl getAtmosphereResourceEvent()",
    "Returns the AtmosphereHandler object for managing real-time communication in the project.": "AtmosphereResourceImpl.java AtmosphereHandler getAtmosphereHandler()",
    "Sets the object to be written on timeout for an AtmosphereResource in the project.": "AtmosphereResourceImpl.java AtmosphereResource writeOnTimeout(Object o)",
    "Returns the object to write on timeout in the project, ensuring proper handling of timeout scenarios.": "AtmosphereResourceImpl.java Object writeOnTimeout()",
    "Function generates a unique identifier for project entities.": "AtmosphereResourceImpl.java String uuid()",
    "This function returns the transport object within the project for further use.": "AtmosphereResourceImpl.java TRANSPORT transport()",
    "Sets the transport method for the AtmosphereResource object in the project.": "AtmosphereResourceImpl.java AtmosphereResourceImpl transport(TRANSPORT transport)",
    "Resume broadcast feature in AtmosphereResource, setting attribute for legacy support in project.": "AtmosphereResourceImpl.java AtmosphereResource resumeOnBroadcast(boolean resumeOnBroadcast)",
    "Function checks if user is suspended in project, returning boolean value.": "AtmosphereResourceImpl.java boolean isSuspended()",
    "This function determines if a resume should be displayed on broadcast in a project.": "AtmosphereResourceImpl.java boolean resumeOnBroadcast()",
    "Resume AtmosphereResource for broadcasting messages and notifying listeners in project context.": "AtmosphereResourceImpl.java AtmosphereResource resume()",
    "Suspends the AtmosphereResource with no timeout in the project context.": "AtmosphereResourceImpl.java AtmosphereResource suspend()",
    "Suspend AtmosphereResource for specified time period in milliseconds within project context.": "AtmosphereResourceImpl.java AtmosphereResource suspend(long timeout, TimeUnit timeunit)",
    "Suspend AtmosphereResource for long polling or WebSocket communication in project.": "AtmosphereResourceImpl.java AtmosphereResource suspend(long timeout)",
    "Function: getRequest\nRole: Retrieve AtmosphereRequest object, enforcing scope if specified, within project context.": "AtmosphereResourceImpl.java AtmosphereRequest getRequest(boolean enforceScope)",
    "This function retrieves the response object, enforcing scope validation to ensure object validity within the project context.": "AtmosphereResourceImpl.java AtmosphereResponse getResponse(boolean enforceScope)",
    "Returns an AtmosphereRequest object with default settings for use in the project.": "AtmosphereResourceImpl.java AtmosphereRequest getRequest()",
    "This function returns an AtmosphereResponse object with the option to include additional information.": "AtmosphereResourceImpl.java AtmosphereResponse getResponse()",
    "This function returns a broadcaster object with an option to include additional information.": "AtmosphereResourceImpl.java Broadcaster getBroadcaster()",
    "Returns an unmodifiable list of broadcasters in the project, ensuring data integrity and access control.": "AtmosphereResourceImpl.java List<Broadcaster> broadcasters()",
    "Function: Get or create a Broadcaster for AtmosphereResource in project context.\nDescription: Ensures Broadcaster is available, recreates if destroyed, and associates with AtmosphereResource.": "AtmosphereResourceImpl.java Broadcaster getBroadcaster(boolean autoCreate)",
    "Sets the broadcaster for the AtmosphereResource and returns the unique broadcaster for the project.": "AtmosphereResourceImpl.java AtmosphereResource setBroadcaster(Broadcaster broadcaster)",
    "Adds a broadcaster to the AtmosphereResource and ensures it is unique within the project.": "AtmosphereResourceImpl.java AtmosphereResource addBroadcaster(Broadcaster broadcaster)",
    "Remove a broadcaster from the list of broadcasters associated with an AtmosphereResource in the project.": "AtmosphereResourceImpl.java AtmosphereResource removeBroadcaster(Broadcaster broadcaster)",
    "Adds a new Broadcaster to the list of unique broadcasters in the AtmosphereResource.": "AtmosphereResourceImpl.java AtmosphereResource uniqueBroadcaster(Broadcaster newB)",
    "Returns the AtmosphereConfig object, providing configuration settings for the project's atmosphere.": "AtmosphereResourceImpl.java AtmosphereConfig getAtmosphereConfig()",
    "This function returns the action within the project, providing a way to access and utilize project actions.": "AtmosphereResourceImpl.java Action action()",
    "Reset function clears state and listeners, sets default values, and changes action type to CREATED.": "AtmosphereResourceImpl.java void reset()",
    "Sets the flag indicating if the object is in scope within the project.": "AtmosphereResourceImpl.java void setIsInScope(boolean isInScope)",
    "This function checks if a certain condition is within scope in the project.": "AtmosphereResourceImpl.java boolean isInScope()",
    "Sets the serializer for the AtmosphereResource object to customize data serialization, enhancing project functionality and performance.": "AtmosphereResourceImpl.java AtmosphereResource setSerializer(Serializer s)",
    "This function checks if a project has been resumed after being paused.": "AtmosphereResourceImpl.java boolean isResumed()",
    "This function checks if a task has been cancelled in the project.": "AtmosphereResourceImpl.java boolean isCancelled()",
    "Write a string to the response and resume if needed in an Atmosphere project.": "AtmosphereResourceImpl.java AtmosphereResource write(String s)",
    "Write byte array to response and resume if needed for real-time updates in project.": "AtmosphereResourceImpl.java AtmosphereResource write(byte[] o)",
    "Returns the serializer used in the project for data serialization and deserialization.": "AtmosphereResourceImpl.java Serializer getSerializer()",
    "Adds an event listener to the AtmosphereResource to handle events within the project context.": "AtmosphereResourceImpl.java AtmosphereResource addEventListener(AtmosphereResourceEventListener e)",
    "This function removes an event listener from an AtmosphereResource object in a project.": "AtmosphereResourceImpl.java AtmosphereResource removeEventListener(AtmosphereResourceEventListener e)",
    "This function removes all event listeners from the AtmosphereResource object to prevent memory leaks and improve performance.": "AtmosphereResourceImpl.java AtmosphereResource removeEventListeners()",
    "Notify listeners of events in the AtmosphereResource object within the project context.": "AtmosphereResourceImpl.java AtmosphereResource notifyListeners()",
    "Notify listeners of AtmosphereResource events, handling different event types and errors, within a project's event handling system.": "AtmosphereResourceImpl.java AtmosphereResource notifyListeners(AtmosphereResourceEvent event)",
    "This function removes the AtmosphereResource from all broadcasters in the project to prevent duplicate broadcasting.": "AtmosphereResourceImpl.java AtmosphereResource removeFromAllBroadcasters()",
    "Handles and propagates exceptions to Atmosphere framework for further processing.": "AtmosphereResourceImpl.java void onThrowable(Throwable t)",
    "Propagate throwable events to all registered listeners in an Atmosphere project for error handling.": "AtmosphereResourceImpl.java void onThrowable(AtmosphereResourceEvent e)",
    "This function triggers the heartbeat event for all registered listeners in an Atmosphere project.": "AtmosphereResourceImpl.java void onHeartbeat(AtmosphereResourceEvent e)",
    "Function: Execute suspend event listeners and notify framework of resource suspension.\nDescription: Iterates through listeners, skips non-interceptors if disabled, and notifies framework.": "AtmosphereResourceImpl.java void onSuspend(AtmosphereResourceEvent e)",
    "Iterates through listeners and calls onPreSuspend method, allowing interception based on disableSuspendEvent flag.": "AtmosphereResourceImpl.java void onPreSuspend(AtmosphereResourceEvent e)",
    "Calls onResume method for all registered listeners in the project's Atmosphere framework for real-time communication.": "AtmosphereResourceImpl.java void onResume(AtmosphereResourceEvent e)",
    "Function handles disconnection events for Atmosphere resources, notifying listeners and framework of disconnection.": "AtmosphereResourceImpl.java void onDisconnect(AtmosphereResourceEvent e)",
    "This function broadcasts events to all registered listeners in an Atmosphere project.": "AtmosphereResourceImpl.java void onBroadcast(AtmosphereResourceEvent e)",
    "Function triggers event listeners on resource close, including WebSocket specific events, in an Atmosphere project.": "AtmosphereResourceImpl.java void onClose(AtmosphereResourceEvent e)",
    "This function returns a ConcurrentLinkedQueue of AtmosphereResourceEventListeners for managing event listeners in the project.": "AtmosphereResourceImpl.java ConcurrentLinkedQueue<AtmosphereResourceEventListener> listeners()",
    "Sets the AtmosphereHandler for handling Atmosphere requests in the project, facilitating real-time communication.": "AtmosphereResourceImpl.java AtmosphereResourceImpl atmosphereHandler(AtmosphereHandler atmosphereHandler)",
    "Function cancels the Atmosphere resource, removes from broadcasters, and closes WebSocket connection if needed.": "AtmosphereResourceImpl.java void cancel() throws IOException",
    "Unregisters a resource from the project by removing it from the resources factory.": "AtmosphereResourceImpl.java void unregister()",
    "Function: _destroy\nRole: Clean up and unregister resources, remove event listeners in a project context.\nDescription: Safely destroy resources and clean up in a project.": "AtmosphereResourceImpl.java void _destroy()",
    "This function generates a string representation of an AtmosphereResource object for logging purposes.": "AtmosphereResourceImpl.java String toString()",
    "Function: disableSuspend\nRole: Controls suspension feature\nDescription: Disables or enables suspension functionality within the project.": "AtmosphereResourceImpl.java AtmosphereResourceImpl disableSuspend(boolean disableSuspend)",
    "Function: Manages HTTP session creation and retrieval.\nDescription: Supports session creation based on configuration and request, within project context.": "AtmosphereResourceImpl.java HttpSession session(boolean create)",
    "Close WebSocket connection, set event flag, notify listeners, and cancel operations in project context.": "AtmosphereResourceImpl.java void close() throws IOException",
    "Function: dirtyClose\nRole: Close event, notify listeners, cancel, and close WebSocket connection in project context.\nDescription: Handles closing of event and WebSocket connection while notifying listeners and handling exceptions.": "AtmosphereResourceImpl.java void dirtyClose()",
    "This function sets whether to force binary writing in the AtmosphereResource object.": "AtmosphereResourceImpl.java AtmosphereResource forceBinaryWrite(boolean forceBinaryWrite)",
    "This function determines if binary writing is forced in the project, returning a boolean value.": "AtmosphereResourceImpl.java boolean forceBinaryWrite()",
    "This function returns an active session, commonly used for user authentication and data storage in web applications.": "AtmosphereResourceImpl.java HttpSession session()",
    "Sets the HttpSession for the AtmosphereResourceImpl object within the project context.": "AtmosphereResourceImpl.java AtmosphereResourceImpl session(HttpSession session)",
    "Clone state of AtmosphereResource with listeners, session, broadcasters, and handler for project continuity.": "AtmosphereResourceImpl.java AtmosphereResourceImpl cloneState(AtmosphereResource r)",
    "Function disables suspend event in AtmosphereResource, controlling behavior during project execution.": "AtmosphereResourceImpl.java AtmosphereResourceImpl disableSuspendEvent(boolean disableSuspendEvent)",
    "This function returns a boolean value indicating whether the suspend event is disabled in the project.": "AtmosphereResourceImpl.java boolean disableSuspendEvent()",
    "Returns the WebSocket object for communication in the project, facilitating real-time data exchange between client and server.": "AtmosphereResourceImpl.java WebSocket webSocket()",
    "Assigns a WebSocket to the AtmosphereResource for communication in the project.": "AtmosphereResourceImpl.java AtmosphereResourceImpl webSocket(WebSocket webSocket)",
    "Compares two AtmosphereResourceImpl objects based on their UUIDs for equality within a project.": "AtmosphereResourceImpl.java boolean equals(Object o)",
    "Generates hash code based on UUID for identifying objects uniquely in a project.": "AtmosphereResourceImpl.java int hashCode()",
    "This function retrieves and sets a flag indicating if the project is in the closing phase.": "AtmosphereResourceImpl.java boolean getAndSetInClosingPhase()",
    "This function checks if a pending close action is in progress within the project.": "AtmosphereResourceImpl.java boolean isPendingClose ()",
    "This function retrieves and sets a pending close status for an object in a project.": "AtmosphereResourceImpl.java boolean getAndSetPendingClose()",
    "Handles suspended state for a specific UUID within the project.": "AtmosphereResourceListener.java void onSuspended(String uuid)",
    "Function to handle disconnection events by a specific user identified by UUID in the project.": "AtmosphereResourceListener.java void onDisconnect(String uuid)"
}