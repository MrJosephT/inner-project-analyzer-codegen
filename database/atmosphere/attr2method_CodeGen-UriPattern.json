{
    "char[] HEX_DIGITS={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'},String[] SCHEME={\"0-9\",\"A-Z\",\"a-z\",\"+\",\"-\",\".\"},String[] UNRESERVED={\"0-9\",\"A-Z\",\"a-z\",\"-\",\".\",\"_\",\"~\"},String[] SUB_DELIMS={\"!\",\"$\",\"&\",\"'\",\"(\",\")\",\"*\",\"+\",\",\",\";\",\"=\"},boolean[][] ENCODING_TABLES=creatingEncodingTables(),Charset UTF_8_CHARSET=StandardCharsets.UTF_8,PathSegmentImpl EMPTY_PATH_SEGMENT=newPathSegmentImpl(\"\",false),String path,Map<String,String> matrixParameters,int[] HEX_TABLE=createHexTable()": "UriComponent.java",
    "UriPattern EMPTY=newUriPattern(),String regex,Pattern regexPattern,int[] groupIndexes,EmptyStringMatchResult EMPTY_STRING_MATCH_RESULT=newEmptyStringMatchResult(),MatchResult r": "UriPattern.java",
    "Comparator<UriTemplate> COMPARATOR=newComparator<UriTemplate>(){publicintcompare(UriTemplateo1,UriTemplateo2){if(o1==null&&o2==null)return0;if(o1==null)return1;if(o2==null)return-1;if(o1==EMPTY&&o2==EMPTY)return0;if(o1==EMPTY)return1;if(o2==EMPTY)return-1;inti=o2.getNumberOfExplicitCharacters()-o1.getNumberOfExplicitCharacters();if(i!=0)returni;i=o2.getNumberOfTemplateVariables()-o1.getNumberOfTemplateVariables();if(i!=0)returni;i=o2.getNumberOfExplicitRegexes()-o1.getNumberOfExplicitRegexes();if(i!=0)returni;returno2.pattern.getRegex().compareTo(o1.pattern.getRegex());}},Pattern TEMPLATE_NAMES_PATTERN=Pattern.compile(\"\\\\{(\\\\w[-\\\\w.]*)}\"),UriTemplate EMPTY=newUriTemplate(),String template,String normalizedTemplate,UriPattern pattern,boolean endsWithSlash,List<String> templateVariables,int numOfExplicitRegexes,int numOfCharacters": "UriTemplate.java",
    "int[] EMPTY_INT_ARRAY=newint[0],Set<Character> RESERVED_REGEX_CHARACTERS=createReserved(),Pattern TEMPLATE_VALUE_PATTERN=Pattern.compile(\"[^/]+?\"),int pos,String s,String template,StringBuffer regex=newStringBuffer(),StringBuffer normalizedTemplate=newStringBuffer(),StringBuffer literalCharactersBuffer=newStringBuffer(),int numOfExplicitRegexes,int literalCharacters,Pattern pattern,List<String> names=newArrayList<>(),List<Integer> groupCounts=newArrayList<>(),Map<String,Pattern> nameToPattern=newHashMap<>()": "UriTemplateParser.java"
}