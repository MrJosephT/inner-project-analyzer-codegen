{
    "String id,Object message": "BroadcastMessage.java",
    "long serialVersionUID=-126253550299206646L,Object message,String id,long createTime,String uuid": "CacheMessage.java",
    "BroadcasterLifeCyclePolicy IDLE=newBroadcasterLifeCyclePolicy(ATMOSPHERE_RESOURCE_POLICY.IDLE),BroadcasterLifeCyclePolicy IDLE_DESTROY=newBroadcasterLifeCyclePolicy(ATMOSPHERE_RESOURCE_POLICY.IDLE_DESTROY),BroadcasterLifeCyclePolicy IDLE_RESUME=newBroadcasterLifeCyclePolicy(ATMOSPHERE_RESOURCE_POLICY.IDLE_RESUME),BroadcasterLifeCyclePolicy EMPTY=newBroadcasterLifeCyclePolicy(ATMOSPHERE_RESOURCE_POLICY.EMPTY),BroadcasterLifeCyclePolicy EMPTY_DESTROY=newBroadcasterLifeCyclePolicy(ATMOSPHERE_RESOURCE_POLICY.EMPTY_DESTROY),BroadcasterLifeCyclePolicy IDLE_EMPTY_DESTROY=newBroadcasterLifeCyclePolicy(ATMOSPHERE_RESOURCE_POLICY.IDLE_EMPTY_DESTROY),BroadcasterLifeCyclePolicy NEVER=newBroadcasterLifeCyclePolicy(ATMOSPHERE_RESOURCE_POLICY.NEVER),ATMOSPHERE_RESOURCE_POLICY policy,int time,TimeUnit timeUnit,ATMOSPHERE_RESOURCE_POLICY policy,int time,TimeUnit timeUnit": "BroadcasterLifeCyclePolicy.java",
    "ACTION a,Object o,Object originalMsg, use ACTION to mark filter status": "BroadcastFilter.java",
    "int POLLING_DEFAULT=100,String CACHED=DefaultBroadcaster.class.getName()+\".messagesCached\",Logger logger=LoggerFactory.getLogger(DefaultBroadcaster.class),String DESTROYED=\"This Broadcaster has been destroyed and cannot be used {} by invoking {}\",List<AtmosphereResourceEventListener> EMPTY_LISTENERS=newArrayList<>(),ConcurrentLinkedQueue<AtmosphereResource> resources=newConcurrentLinkedQueue<>(),BroadcasterConfig bc,BlockingQueue<Deliver> messages=newLinkedBlockingQueue<>(),Collection<BroadcasterListener> broadcasterListeners,AtomicBoolean started=newAtomicBoolean(false),AtomicBoolean initialized=newAtomicBoolean(false),AtomicBoolean destroyed=newAtomicBoolean(false),SCOPE scope=SCOPE.APPLICATION,String name=DefaultBroadcaster.class.getSimpleName(),ConcurrentLinkedQueue<Deliver> delayedBroadcast=newConcurrentLinkedQueue<>(),ConcurrentLinkedQueue<Deliver> broadcastOnResume=newConcurrentLinkedQueue<>(),ConcurrentLinkedQueue<BroadcasterLifeCyclePolicyListener> lifeCycleListeners=newConcurrentLinkedQueue<>(),ConcurrentHashMap<String,WriteQueue> writeQueues=newConcurrentHashMap<>(),WriteQueue uniqueWriteQueue=newWriteQueue(\"-1\"),AtomicInteger dispatchThread=newAtomicInteger(),Future<?>[] notifierFuture,Future<?>[] asyncWriteFuture,POLICY policy=POLICY.FIFO,AtomicLong maxSuspendResource=newAtomicLong(-1),AtomicBoolean requestScoped=newAtomicBoolean(false),AtomicBoolean recentActivity=newAtomicBoolean(false),BroadcasterLifeCyclePolicy lifeCyclePolicy=newBroadcasterLifeCyclePolicy.Builder().policy(NEVER).build(),URI uri,AtmosphereConfig config,Object[] awaitBarrier=newObject[0],AtomicBoolean outOfOrderBroadcastSupported=newAtomicBoolean(false),int writeTimeoutInSecond=-1,int waitTime=POLLING_DEFAULT,boolean backwardCompatible,LifecycleHandler lifecycleHandler,Future<?> currentLifecycleTask,boolean cacheOnIOFlushException=true,boolean sharedListeners,boolean candidateForPoolable,String usingTokenIdForAttribute=UUID.randomUUID().toString(),BlockingQueue<AsyncWriteToken> queue=newLinkedBlockingQueue<>(),AtomicBoolean monitored=newAtomicBoolean(),String uuid,AtmosphereResource r,AtmosphereResourceEvent e,AtomicBoolean completed=newAtomicBoolean(),AtomicBoolean executed=newAtomicBoolean(),Thread ioThread,AtmosphereResource resource,Object msg,BroadcasterFuture future,Object originalMessage,CacheMessage cache,AtomicInteger count": "DefaultBroadcaster.java",
    "LifecycleHandler liferCycleHandler=newLifecycleHandler()": "BroadcasterLifecyclePolicyHandler.java",
    "Logger logger=LoggerFactory.getLogger(LifecycleHandler.class)": "LifecycleHandler.java",
    "Logger logger=LoggerFactory.getLogger(PoolableBroadcasterFactory.class),PoolableProvider<?extendsBroadcaster,?> poolableProvider,String POOLED_ID=\"POOLED\",Collection<Broadcaster> emptyCollection=Collections.emptySet(),boolean trackPooledBroadcaster": "PoolableBroadcasterFactory.java",
    "boolean RUNNING_TEST=false,boolean JDK_11_PLUS=false,Logger LOGGER=LoggerFactory.getLogger(Utils.class)": "Utils.java"
}