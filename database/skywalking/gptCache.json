{
    "DateTime.java DateTime minusDays(int days)": "Subtracts specified number of days from a DateTime object within a project's date manipulation functionality.",
    "DateTimeFormatter.java DateTime parseDateTime(String text)": "Parse text into DateTime object using specified parser and chronology, handling offset and time zone.",
    "Days.java Days daysBetween(ReadableInstant start, ReadableInstant end)": "Calculate the number of days between two given dates in a project.",
    "Days.java int getDays()": "This function retrieves the number of days from a value within the project.",
    "TimeSeriesUtils.java String latestWriteIndexName(Model model)": "Generates the latest write index name based on model type and current time bucket for data summarization.",
    "TimeSeriesUtils.java String[] superDatasetIndexNames(String indexName, long startSecondTB, long endSecondTB)": "Generate super dataset index names based on time range for data aggregation in project.",
    "TimeSeriesUtils.java String queryIndexName(String tableName,\n                                        long pointOfTB,\n                                        Step step,\n                                        boolean isRecord,\n                                        boolean isSuperDataSet)": "Generate index name based on table name, time point, step, and dataset type for data querying.",
    "TimeSeriesUtils.java String writeIndexName(Model model, long timeBucket)": "Generate index name based on model properties and time bucket for data summarization in database.",
    "TimeSeriesUtils.java long isolateTimeFromIndexName(String indexName)": "This function isolates and returns the timestamp from an Elasticsearch index name.",
    "TimeSeriesUtils.java long compressDateTime(DateTime time, int dayStep)": "Compresses DateTime into a smaller time bucket based on dayStep for lower traffic optimization.",
    "FeishuHookCallback.java void doAlarm(List<AlarmMessage> alarmMessages) throws Exception": "Function: Send alarm messages to Feishu webhooks based on settings.\nDescription: Groups messages, generates request body, and posts to webhooks.",
    "FeishuHookCallback.java String getRequestBody(FeishuSettings.WebHookUrl webHookUrl, AlarmMessage alarmMessage, String textTemplate)": "This function generates a request body for a Feishu webhook with optional encryption.",
    "FeishuHookCallback.java String sign(final Long timestamp, String secret) throws NoSuchAlgorithmException, InvalidKeyException": "Generate HMACSHA256 signature using timestamp and secret key for authentication and data integrity in project.",
    "JsonObject.java JsonObject deepCopy()": "Function role: Create a deep copy of a JsonObject.\n\nDescription: Ensures data integrity by duplicating JsonObject structure and values for project use.",
    "JsonObject.java void add(String property, JsonElement value)": "Function adds a property and its value to a JSON object within a project's data management system.",
    "JsonObject.java JsonElement remove(String property)": "This function removes a specified property from a JSON object within a project.",
    "JsonObject.java void addProperty(String property, String value)": "Add a property with a value to a JSON object in a project.",
    "JsonObject.java void addProperty(String property, Number value)": "Adds a property with a number value to a JSON object in a project.",
    "JsonObject.java void addProperty(String property, Boolean value)": "Function adds a property with a boolean value to a JSON object in a project.",
    "JsonObject.java void addProperty(String property, Character value)": "Add a property with a character value to a JSON object in a project.",
    "JsonObject.java Set<Map.Entry<String, JsonElement>> entrySet()": "This function returns a set of key-value pairs representing the members of a JSON object in a project.",
    "JsonObject.java Set<String> keySet()": "This function returns a set of keys from a map, used to access and manipulate data within the project.",
    "JsonObject.java int size()": "This function returns the size of a collection of members within the project.",
    "JsonObject.java boolean isEmpty()": "This function checks if the list of members is empty in the project.",
    "JsonObject.java boolean has(String memberName)": "This function checks if a given member name exists in the project's list of members.",
    "JsonObject.java JsonElement get(String memberName)": "This function retrieves a JSON element by its member name within a project's context.",
    "JsonObject.java JsonPrimitive getAsJsonPrimitive(String memberName)": "This function retrieves a JsonPrimitive value from a specified member within a project's JSON data.",
    "JsonObject.java JsonArray getAsJsonArray(String memberName)": "This function retrieves a JsonArray from a JsonObject based on a specified member name.",
    "JsonObject.java JsonObject getAsJsonObject(String memberName)": "This function retrieves a JsonObject from a collection based on a specified member name.",
    "JsonObject.java Map<String, JsonElement> asMap()": "Function: asMap()\nRole: Expose underlying map with non-null keys and values for project context.",
    "JsonObject.java boolean equals(Object o)": "Function checks if object is equal to current JsonObject by comparing member objects.",
    "JsonObject.java int hashCode()": "This function calculates the hash code of a list of members within the project for identification purposes."
}