{
    "Converts an integer to bytes and stores them in a byte array at a specified offset.": "StringSerializer.java void putBytesFromInt(int i, final int offset, final int size, final byte[] buf)",
    "This function converts a long integer to bytes and stores them in a byte array.": "StringSerializer.java void putBytesFromLong(long i, final int offset, int size, final byte[] buf)",
    "This function calculates the size of a string based on the input integer within a project.": "StringSerializer.java int stringSize(int x)",
    "This function calculates the number of digits in a long integer, useful for formatting and processing large numbers.": "StringSerializer.java int stringSize(long x)",
    "Function writes integer values to a LinkedBuffer in a serialization project.": "StringSerializer.java LinkedBuffer writeInt(final int value, final WriteSession session,\n            LinkedBuffer lb)",
    "Function writes long value to LinkedBuffer in a WriteSession, ensuring efficient space usage.": "StringSerializer.java LinkedBuffer writeLong(final long value, final WriteSession session,\n            LinkedBuffer lb)",
    "This function writes a float value as ASCII to a LinkedBuffer within a project's serialization process.": "StringSerializer.java LinkedBuffer writeFloat(final float value, final WriteSession session,\n            final LinkedBuffer lb)",
    "Converts a double value to a string and writes it to a LinkedBuffer in a project.": "StringSerializer.java LinkedBuffer writeDouble(final double value, final WriteSession session,\n            final LinkedBuffer lb)",
    "This function calculates the size of a UTF-8 encoded string in a project.": "StringSerializer.java int computeUTF8Size(final CharSequence str, final int index, final int len)",
    "This function writes UTF-8 encoded characters to a buffer in a streaming mode for serialization.": "StringSerializer.java LinkedBuffer writeUTF8(final CharSequence str, int i, final int len,\n            byte[] buffer, int offset, int limit,\n            final WriteSession session, LinkedBuffer lb)",
    "This function writes UTF-8 encoded characters from a CharSequence into a LinkedBuffer in a serialization project.": "StringSerializer.java LinkedBuffer writeUTF8(final CharSequence str, int i, final int len,\n            final WriteSession session, final LinkedBuffer lb)",
    "Function writes UTF-8 encoded CharSequence to LinkedBuffer in a project, handling buffer overflow.": "StringSerializer.java LinkedBuffer writeUTF8(final CharSequence str, final WriteSession session,\n            final LinkedBuffer lb)",
    "Function role: Write ASCII characters from a CharSequence to a LinkedBuffer in a project.\n\nDescription: Appends ASCII characters to a buffer efficiently, handling buffer resizing if needed.": "StringSerializer.java LinkedBuffer writeAscii(final CharSequence str, final WriteSession session,\n            LinkedBuffer lb)",
    "Function writes a 2-byte integer to a byte array with specified endianness, used for data serialization.": "StringSerializer.java void writeFixed2ByteInt(final int value, final byte[] buffer, int offset,\n            final boolean littleEndian)",
    "Function writes a UTF-8 encoded string with fixed delimiter in a protocol buffer message.": "StringSerializer.java LinkedBuffer writeUTF8FixedDelimited(final CharSequence str,\n            final WriteSession session, LinkedBuffer lb)",
    "Function writes a UTF-8 string with fixed length delimiter in a protocol buffer serialization library.": "StringSerializer.java LinkedBuffer writeUTF8FixedDelimited(final CharSequence str,\n            final boolean littleEndian, final WriteSession session, LinkedBuffer lb)",
    "Function writes UTF-8 encoded string with length delimiter in a LinkedBuffer for serialization.": "StringSerializer.java LinkedBuffer writeUTF8OneByteDelimited(final CharSequence str, final int index,\n            final int len, final WriteSession session, LinkedBuffer lb)",
    "This function writes a UTF-8 encoded string with a variable-length prefix in a buffer.": "StringSerializer.java LinkedBuffer writeUTF8VarDelimited(final CharSequence str, final int index,\n            final int len, final int lowerLimit, int expectedSize,\n            final WriteSession session, LinkedBuffer lb)",
    "This function writes a UTF-8 encoded string with variable length delimiter in a serialization project.": "StringSerializer.java LinkedBuffer writeUTF8VarDelimited(final CharSequence str, final WriteSession session,\n            LinkedBuffer lb)",
    "This function deserializes a byte array into a string within a specified range.": "StringSerializer.java String deser(byte[] nonNullValue)",
    "This function deserializes byte arrays into strings, handling UTF-8 encoding and surrogate pairs for legacy data compatibility.": "StringSerializer.java String deser(byte[] nonNullValue, int offset, int len)",
    "Custom deserialization method that reads UTF data without falling back to old implementation in project.": "StringSerializer.java String deserCustomOnly(byte[] nonNullValue)",
    "This function serializes a non-null string value into a byte array using UTF-8 encoding.": "StringSerializer.java byte[] ser(String nonNullValue)",
    "This function reads UTF-encoded characters from a byte array and converts them to a String.": "StringSerializer.java String readUTF(byte[] buffer, int offset, int len) throws UTFDataFormatException",
    "This function calculates the high surrogate for a given Unicode code point within a larger project.": "StringSerializer.java char highSurrogate(int codePoint)",
    "This function generates a low surrogate character for a given Unicode code point in a project.": "StringSerializer.java char lowSurrogate(int codePoint)",
    "Creates a new instance of CodedInput for reading data from an input stream in a project.": "CodedInput.java CodedInput newInstance(final InputStream input)",
    "Creates a new instance of CodedInput using a byte array as input data.": "CodedInput.java CodedInput newInstance(final byte[] buf)",
    "Creates a new instance of CodedInput with specified byte array, offset, and length for decoding data.": "CodedInput.java CodedInput newInstance(final byte[] buf, final int off,\n            final int len)",
    "Reads and returns the tag of the next field in a protobuf message, handling exceptions.": "CodedInput.java int readTag() throws IOException",
    "This function checks if the last tag matches the expected value in a Protobuf message.": "CodedInput.java void checkLastTagWas(final int value)\n            throws ProtobufException",
    "Skip a field in a protobuf message based on its wire type, used for efficient parsing.": "CodedInput.java boolean skipField(final int tag) throws IOException",
    "Skip reading and processing messages in a project to improve efficiency and focus on relevant data.": "CodedInput.java void skipMessage() throws IOException",
    "Reads a double value from a packed field in a protocol buffer message.": "CodedInput.java double readDouble() throws IOException",
    "This function reads a float value from a packed field in little-endian format within the project.": "CodedInput.java float readFloat() throws IOException",
    "Reads and returns an unsigned 64-bit integer value from a packed field in a project's data stream.": "CodedInput.java long readUInt64() throws IOException",
    "This function reads a 64-bit integer from a packed field in a protocol buffer message.": "CodedInput.java long readInt64() throws IOException",
    "This function reads a 32-bit integer from a packed field in a project, handling IOException.": "CodedInput.java int readInt32() throws IOException",
    "This function reads a fixed 64-bit value from a stream, used for reading data in a project.": "CodedInput.java long readFixed64() throws IOException",
    "This function reads a fixed 32-bit integer from a stream, commonly used for reading serialized data in a project.": "CodedInput.java int readFixed32() throws IOException",
    "Reads and returns a boolean value from a packed field in a protocol buffer message.": "CodedInput.java boolean readBool() throws IOException",
    "Reads bytes from a buffer into a ByteBuffer, handling fast and slow paths based on buffer size.": "CodedInput.java void readBytes(final ByteBuffer bb) throws IOException",
    "Merge object data using schema within protobuf decoding process to ensure data integrity and completeness.": "CodedInput.java <T> T mergeObject(T value, final Schema<T> schema) throws IOException",
    "Merge encoded object data into a group using schema, ensuring initialization and handling recursion in a project.": "CodedInput.java <T> T mergeObjectEncodedAsGroup(T value, final Schema<T> schema) throws IOException",
    "Reads and returns a ByteString from a buffer, handling fast and slow paths for efficiency.": "CodedInput.java ByteString readBytes() throws IOException",
    "This function reads an unsigned 32-bit integer from a packed field in a protocol buffer message.": "CodedInput.java int readUInt32() throws IOException",
    "Reads and returns an enum value from a packed field in a protocol buffer message.": "CodedInput.java int readEnum() throws IOException",
    "This function reads a signed fixed 32-bit integer from a stream, typically used for reading protocol buffer fields.": "CodedInput.java int readSFixed32() throws IOException",
    "This function reads a fixed 64-bit value from a stream, commonly used for reading protocol buffer fields.": "CodedInput.java long readSFixed64() throws IOException",
    "Reads and decodes a signed 32-bit integer from a packed field in a protocol buffer message.": "CodedInput.java int readSInt32() throws IOException",
    "This function reads a signed 64-bit integer from a stream and decodes it within a project's protocol buffer implementation.": "CodedInput.java long readSInt64() throws IOException",
    "This function reads a variable-length integer from a stream in a protobuf message.": "CodedInput.java int readRawVarint32() throws IOException",
    "Reads and returns a variable-length integer from an input stream, handling truncated messages in a protobuf project.": "CodedInput.java int readRawVarint32(final InputStream input) throws IOException",
    "This function reads a variable-length integer from an input stream in a protobuf message.": "CodedInput.java int readRawVarint32(final InputStream input, final int firstByte) throws IOException",
    "Reads and parses a variable-length integer from a DataInput stream in a protobuf project.": "CodedInput.java int readRawVarint32(final DataInput input, final byte firstByte) throws IOException",
    "Function reads and returns a variable-length integer value from a binary stream in a project.": "CodedInput.java long readRawVarint64() throws IOException",
    "This function reads and converts 4 bytes into a little-endian 32-bit integer, commonly used in binary data processing.": "CodedInput.java int readRawLittleEndian32() throws IOException",
    "This function reads 64-bit little-endian raw data from a stream in a project.": "CodedInput.java long readRawLittleEndian64() throws IOException",
    "This function decodes a zigzag-encoded 32-bit integer within a project involving data compression or serialization.": "CodedInput.java int decodeZigZag32(final int n)",
    "This function decodes a zigzag-encoded 64-bit integer within a project involving data compression or serialization.": "CodedInput.java long decodeZigZag64(final long n)",
    "Function sets a size limit for a project and returns the previous limit.": "CodedInput.java int setSizeLimit(final int limit)",
    "Resets the size counter for total bytes retired in the project's buffer.": "CodedInput.java void resetSizeCounter()",
    "Reset function for managing buffer and limits in a project, ensuring data integrity and size constraints.": "CodedInput.java void reset()",
    "This function sets a limit on the number of bytes processed in a protobuf message.": "CodedInput.java int pushLimit(int byteLimit) throws ProtobufException",
    "Function recomputeBufferSizeAfterLimit adjusts buffer size based on current limit in a project.": "CodedInput.java void recomputeBufferSizeAfterLimit()",
    "This function resets the current limit and recalculates buffer size in a project.": "CodedInput.java void popLimit(final int oldLimit)",
    "Calculates remaining bytes until limit for reading data in a project.": "CodedInput.java int getBytesUntilLimit()",
    "This function checks if the current field is packed in a project involving reading and processing data.": "CodedInput.java boolean isCurrentFieldPacked()",
    "This function checks if the buffer is at the end of the file and refills it if necessary.": "CodedInput.java boolean isAtEnd() throws IOException",
    "This function calculates the total number of bytes read from a buffer in a project.": "CodedInput.java int getTotalBytesRead()",
    "This function refills the buffer for reading data, handling limits and exceptions in a project.": "CodedInput.java boolean refillBuffer(final boolean mustSucceed) throws IOException",
    "Reads and returns a single byte from a buffer, ensuring data availability for processing in a project.": "CodedInput.java byte readRawByte() throws IOException",
    "This function reads a specified number of raw bytes from a buffer in a protobuf message.": "CodedInput.java byte[] readRawBytes(final int size) throws IOException",
    "Function skips a specified number of raw bytes while handling buffer limits and stream end.": "CodedInput.java void skipRawBytes(final int size) throws IOException",
    "This function reads and returns the field number from a schema in a protobuf message.": "CodedInput.java <T> int readFieldNumber(Schema<T> schema) throws IOException",
    "This function checks if a field is packed and sets a limit for reading packed data.": "CodedInput.java void checkIfPackedField() throws IOException",
    "Reads and returns a byte array from input stream, optimizing for contiguous buffer or building byte array.": "CodedInput.java byte[] readByteArray() throws IOException",
    "Handles unknown fields by skipping them based on the provided schema in the project.": "CodedInput.java <T> void handleUnknownField(int fieldNumber, Schema<T> schema) throws IOException",
    "Transfer byte range data to output, handling fast and slow paths for efficiency in serialization.": "CodedInput.java void transferByteRangeTo(Output output, boolean utf8String, int fieldNumber,\n            boolean repeated) throws IOException",
    "This function returns the last tag used in the project, providing information about the project's version history.": "CodedInput.java int getLastTag()",
    "Reads data from input stream and converts it to ByteBuffer for further processing in project.": "CodedInput.java ByteBuffer readByteBuffer() throws IOException"
}